!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.simpleTree=t()}(this,function(){"use strict";!function(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var i=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===n&&i.firstChild?i.insertBefore(r,i.firstChild):i.appendChild(r),r.styleSheet?r.styleSheet.cssText=e:r.appendChild(document.createTextNode(e))}}("@font-face {\n  font-family: \"iconfont\";\n  src: url('iconfont.eot?t=1523953995887');\n  /* IE9*/\n  src: url('iconfont.eot?t=1523953995887#iefix') format('embedded-opentype'), /* IE6-IE8 */ url('data:application/x-font-woff;charset=utf-8;base64,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') format('woff'), url('iconfont.ttf?t=1523953995887') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/ url('iconfont.svg?t=1523953995887#iconfont') format('svg');\n  /* iOS 4.1- */\n}\n.iconfont {\n  font-family: \"iconfont\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.icon-angle-right:before {\n  content: \"\\e790\";\n}\n.icon-angle-down:before {\n  content: \"\\e791\";\n}\n.icon-wd:before {\n  content: \"\\e66a\";\n}\n.tree-wrapper {\n  width: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.tree-wrapper ul {\n  list-style: none;\n}\n.tree-wrapper .tree-node-content {\n  line-height: 36px;\n  height: 36px;\n}\n.tree-wrapper .tree-node-content:hover {\n  background: #e4e8f1;\n  cursor: pointer;\n}\n.tree-wrapper .tree-node-content .tree-node-title {\n  padding-left: 3px;\n}\n.tree-wrapper .tree-node-content.active .tree-node-title {\n  font-style: italic;\n  font-weight: bold;\n}\n.tree-wrapper .tree-node-content.active {\n  background: #0489e0;\n}\n.tree-wrapper .tree-node-content .tree-node-icon.icon-angle {\n  display: inline-block;\n  cursor: pointer;\n  width: 0;\n  height: 0;\n  margin-left: 6px;\n  margin-right: 3px;\n  border: 5px solid transparent;\n  border-right-width: 0;\n  border-left-color: #000;\n  border-left-width: 7px;\n  -webkit-transform: rotate(0);\n          transform: rotate(0);\n  transition: -webkit-transform 0.3s ease;\n  transition: transform 0.3s ease;\n  transition: transform 0.3s ease, -webkit-transform 0.3s ease;\n}\n.tree-wrapper .tree-node-content .tree-node-icon.icon-angle.down {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n");var e=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}(),n=Object.assign?Object.assign:function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},d=function(e){var t=document.createElement("div");return t.innerHTML=e,t.childNodes[0]};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);return this.opts=n({},{baseNode:null,paddingLeft:16,animateSpeed:"normal",treeData:[],frontIconClassName:null,folderIconClassName:null,dblclick:null,click:null,createTreeNodeContent:null,templates:{treeWrapper:'<div class="tree-wrapper"></div>',treeBaseNode:'<ul class="tree-base-node"></ul>',treeNode:'<li class="tree-node"></li>',treeGroup:'<ul class="tree-group"></ul>',treeNodeContent:'<div class="tree-node-content"></div>'}},e),this.domRefs={},this.activeItem=null,this.domRefs.treeNodeContents=[],this.initDom().initState().bindEvent().appendBaseNode(),this}return e(t,[{key:"initDom",value:function(){if(!(this.opts.treeData instanceof Array))throw new TypeError("treeData must be an Array!");return this.domRefs.treeWrapper=d(this.opts.templates.treeWrapper),this.domRefs.treeBaseNode=d(this.opts.templates.treeBaseNode),this.initTree(this.domRefs.treeWrapper,this.domRefs.treeBaseNode,this.opts.treeData,0),this}},{key:"initTree",value:function(e,t,n,i){for(var r=void 0,o=void 0,s=0,a=n.length;s<a;s++){r=d(this.opts.templates.treeNode),o=d(this.opts.templates.treeNodeContent),!0===n[s].folder?o.innerHTML='<span class="tree-node-icon"></span><span class="tree-node-title">'+n[s].title+"</span>":null===this.opts.frontIconClassName?o.innerHTML='<span class="tree-node-title">'+n[s].title+"</span>":o.innerHTML='<span class="tree-node-icon"></span><span class="tree-node-title">'+n[s].title+"</span>",o.style.paddingLeft=i*this.opts.paddingLeft+"px",o.nodeData=n[s],this.domRefs.treeNodeContents.push(o),r.appendChild(o),t.appendChild(r),e.appendChild(t);var A=i;if(!0===n[s].folder&&0<n[s].children.length){A++;var l=d(this.opts.templates.treeGroup);this.initTree(r,l,n[s].children,A)}}}},{key:"initState",value:function(){for(var e=this.domRefs.treeNodeContents,t=this.opts,n=t.folderIconClassName,i=t.createTreeNodeContent,r=0,o=e.length;r<o;r++){var s=e[r].nodeData;if(!0===s.folder){if(e[r].setAttribute("role","folder"),e[r].firstChild.classList.add("icon-angle"),n){var a='<span class="tree-folder-icon '+n+'"></span>';e[r].firstChild.insertAdjacentHTML("afterend",a)}!0===s.expand?(e[r].firstChild.classList.add("down"),e[r].setAttribute("expand",!0)):e[r].nextElementSibling.style.display="none"}else e[r].firstChild.classList.add("iconfont"),this.opts.frontIconClassName&&e[r].firstChild.classList.add(this.opts.frontIconClassName);i&&i(e[r],s)}return this}},{key:"appendBaseNode",value:function(){this.opts.baseNode.appendChild(this.domRefs.treeWrapper)}},{key:"slideAnimate",value:function(e){window.requestAnimationFrame||(window.requestAnimationFrame=function(e){setTimeout(e,16.7)});var t=void 0,n=void 0;switch(this.opts.animateSpeed){case"normal":n=10;break;case"fast":n=5;break;case"slow":n=15}var i=e.nextElementSibling;if("false"===e.getAttribute("expand")){t=i.offsetHeight,i.style.overflow="hidden";var r=t;!function e(){if(r-=Math.ceil(t/n),i.style.height=r+"px",0<r-0)return window.requestAnimationFrame(e);i.style.height="",i.style.display="none",i.style.overflow=""}()}else{i.style.display="block",i.style.overflow="hidden",t=i.offsetHeight,i.style.height=0;var o=t,s=0;!function e(){if(s+=Math.ceil(o/n),i.style.height=s+"px",0<o-s)return window.requestAnimationFrame(e);i.style.height=""}()}}},{key:"bindEvent",value:function(){var r=this;return this.clickHandle=function(e){var t=e||window.event,n=t.target||t.srcElement,i="div"===n.tagName.toLowerCase()?n:n.parentNode;i.hasAttribute("expand")?r.toggleExpand(i):r.opts.click&&(r.toggleActive(i),r.opts.click(t,i.nodeData))},this.dblclickHandle=function(e){var t=e||window.event,n=t.target||t.srcElement,i="div"===n.tagName.toLowerCase()?n:n.parentNode;i.hasAttribute("role")||r.opts.dblclick&&(r.toggleActive(i),r.opts.dblclick(t,i.nodeData))},this.domRefs.treeWrapper.addEventListener("click",this.clickHandle,!1),this.domRefs.treeWrapper.addEventListener("dblclick",this.dblclickHandle,!1),this}},{key:"toggleExpand",value:function(e){"true"===e.getAttribute("expand")?(e.firstChild.classList.remove("down"),e.setAttribute("expand","false")):(e.firstChild.classList.add("down"),e.setAttribute("expand","true")),this.slideAnimate(e)}},{key:"toggleActive",value:function(e){this.activeItem&&this.activeItem.classList.remove("active"),e.classList.add("active"),this.activeItem=e}},{key:"removeEvent",value:function(){this.domRefs.treeWrapper.removeEventListener("click",this.clickHandle,!1),this.domRefs.treeWrapper.removeEventListener("dblclick",this.dblclickHandle,!1),this.clickHandle=null,this.dblclickHandle=null}},{key:"getActiveItem",value:function(){if(this.activeItem)return this.activeItem}},{key:"destroyed",value:function(){this.removeEvent(),this.opts.baseNode.removeChild(this.domRefs.treeWrapper)}}]),t}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
