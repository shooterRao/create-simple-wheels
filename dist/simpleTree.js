!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.simpleTree=t()}(this,function(){"use strict";!function(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var i=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===n&&i.firstChild?i.insertBefore(o,i.firstChild):i.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}("@font-face {\n  font-family: \"iconfont\";\n  src: url('iconfont.eot?t=1523953995887');\n  /* IE9*/\n  src: url('iconfont.eot?t=1523953995887#iefix') format('embedded-opentype'), /* IE6-IE8 */ url('data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAAXgAAsAAAAACKQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADMAAABCsP6z7U9TLzIAAAE8AAAARAAAAFZW7kl+Y21hcAAAAYAAAABuAAABqjrt1H1nbHlmAAAB8AAAAdgAAAI4VWRO5WhlYWQAAAPIAAAALwAAADYRFuiTaGhlYQAAA/gAAAAcAAAAJAfeA4ZobXR4AAAEFAAAABMAAAAUE+kAAGxvY2EAAAQoAAAADAAAAAwBCAGgbWF4cAAABDQAAAAeAAAAIAEUAF1uYW1lAAAEVAAAAUUAAAJtPlT+fXBvc3QAAAWcAAAAQQAAAFy/GT4LeJxjYGRgYOBikGPQYWB0cfMJYeBgYGGAAJAMY05meiJQDMoDyrGAaQ4gZoOIAgCKIwNPAHicY2Bk/s04gYGVgYOpk+kMAwNDP4RmfM1gxMjBwMDEwMrMgBUEpLmmMDgwVDyfyNzwv4EhhrmBoQEozAiSAwAvLA0BeJzFkNENgCAMRK+ChhhHcQA/HcYvJmAMWBLGwGvhxwk88uB6aYAUwArAkZN4QCIEqoepWO6wW+5xsQ5cC89UYyu9T5fNqcQ6gjnPTt4tG36T/Pf0V4ft96w4aaQJv1jjQPOWBzrlVgZwL9myFm0AAHicZZDLaxNRFMbvd18zyUwynUdmkslzkiaj1AaNYwQfSQpuKl0IXbmryy50WwgusmnowoXQha5F8H+QLiL4f4jYbrXQdW+8I7jRw8fhO7/DORwOEYSsv7MzViU+uUHukCfkGSGQW+iWaRNJmg3pFiqJqERBmaW9NDF63SF7jKgrg3A0zgaRNKSDMlq4m4zG6ZCmuJdN6EOMwiZQq8f7Xr/hsbcoVtPWsXpKP6DS7jWcybbavTUNRh3fPLI9r+Z5b0wphEkpd8p4GYUFUShK9VE4ceWsfZO2YdfSeO95qVP3Xpxkr5r9qAAsFvDrnfKnqRu7Wq/j0PdqxkbJrMal3maAo3Or6tvNwQ+iA3miK/qFUEL6LjDDYkYXavW3x3boTt7zE6xyTmdqoXH+o6/sM3tEHLKpv/SA7OmBMDCE7Kb9QXa/Px5FTNt0kE2RFyIKAwdCQmzD7aYYYgJ97rgFaWj9R9gx52opbKGWnGOujeVYakkti2JutSzMc6uWljrBIQ7VO8NQBya3fROnODV9m5vqwDD+oRbLKb2t1605X/OS+CXE9bfimtodm14WCpd/zLqIwdXVxfU+R136LpfqJzzJXV+qC/6eo6EhEzkUfEPDc07Ib0kcZKh4nGNgZGBgAOIrXzud4vltvjJwszCAwLXfl7wR9P8jLAzMNkAuBwMTSBQAZ0MMMQB4nGNgZGBgbvjfwBDDwgACQJKRARWwAgBHCwJueJxjYWBgYH7JwMDCgMAADpsA/QAAAAAAAHYAhACSARx4nGNgZGBgYGUIBGIQYAJiLiBkYPgP5jMAABEtAXIAAHicZY9NTsMwEIVf+gekEqqoYIfkBWIBKP0Rq25YVGr3XXTfpk6bKokjx63UA3AejsAJOALcgDvwSCebNpbH37x5Y08A3OAHHo7fLfeRPVwyO3INF7gXrlN/EG6QX4SbaONVuEX9TdjHM6bCbXRheYPXuGL2hHdhDx18CNdwjU/hOvUv4Qb5W7iJO/wKt9Dx6sI+5l5XuI1HL/bHVi+cXqnlQcWhySKTOb+CmV7vkoWt0uqca1vEJlODoF9JU51pW91T7NdD5yIVWZOqCas6SYzKrdnq0AUb5/JRrxeJHoQm5Vhj/rbGAo5xBYUlDowxQhhkiMro6DtVZvSvsUPCXntWPc3ndFsU1P9zhQEC9M9cU7qy0nk6T4E9XxtSdXQrbsuelDSRXs1JErJCXta2VELqATZlV44RelzRiT8oZ0j/AAlabsgAAAB4nGNgYoAALgbsgJWRiZGZkYWRlZGNgbFCsDgxLyszMb8iMy9dtygzPaNEAFkkJb88j708NS8lMS+dgQEAqHERFgAAAA==') format('woff'), url('iconfont.ttf?t=1523953995887') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/ url('iconfont.svg?t=1523953995887#iconfont') format('svg');\n  /* iOS 4.1- */\n}\n.iconfont {\n  font-family: \"iconfont\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.icon-angle-right:before {\n  content: \"\\e790\";\n}\n.icon-angle-down:before {\n  content: \"\\e791\";\n}\n.icon-wd:before {\n  content: \"\\e66a\";\n}\n.tree-wrapper {\n  width: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.tree-wrapper ul {\n  list-style: none;\n}\n.tree-wrapper .tree-node-content {\n  line-height: 36px;\n  height: 36px;\n}\n.tree-wrapper .tree-node-content:hover {\n  background: #e4e8f1;\n  cursor: pointer;\n}\n.tree-wrapper .tree-node-content .tree-node-title {\n  padding-left: 3px;\n}\n.tree-wrapper .tree-node-content.active .tree-node-title {\n  font-style: italic;\n  font-weight: bold;\n}\n.tree-wrapper .tree-node-content.active {\n  background: #0489e0;\n}\n.tree-wrapper .tree-node-content .tree-node-icon.icon-angle {\n  display: inline-block;\n  cursor: pointer;\n  width: 0;\n  height: 0;\n  margin-left: 6px;\n  margin-right: 3px;\n  border: 5px solid transparent;\n  border-right-width: 0;\n  border-left-color: #000;\n  border-left-width: 7px;\n  -webkit-transform: rotate(0);\n          transform: rotate(0);\n  transition: -webkit-transform 0.3s ease;\n  transition: transform 0.3s ease;\n  transition: transform 0.3s ease, -webkit-transform 0.3s ease;\n}\n.tree-wrapper .tree-node-content .tree-node-icon.icon-angle.down {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n");var e=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}(),n=Object.assign?Object.assign:function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},d=function(e){var t=document.createElement("div");return t.innerHTML=e,t.childNodes[0]};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);return this.opts=n({},{baseNode:null,paddingLeft:16,animateSpeed:"normal",treeData:[],frontIconClassName:null,folderIconClassName:null,dblclick:null,click:null,createTreeNodeContent:null,templates:{treeWrapper:'<div class="tree-wrapper"></div>',treeBaseNode:'<ul class="tree-base-node"></ul>',treeNode:'<li class="tree-node"></li>',treeGroup:'<ul class="tree-group"></ul>',treeNodeContent:'<div class="tree-node-content"></div>'}},e),this.domRefs={},this.activeItem=null,this.domRefs.treeNodeContents=[],this.initDom().initState().bindEvent().appendBaseNode(),this}return e(t,[{key:"initDom",value:function(){if(!(this.opts.treeData instanceof Array))throw new TypeError("treeData must be a Array!");return this.domRefs.treeWrapper=d(this.opts.templates.treeWrapper),this.domRefs.treeBaseNode=d(this.opts.templates.treeBaseNode),this.initTree(this.domRefs.treeWrapper,this.domRefs.treeBaseNode,this.opts.treeData,0),this}},{key:"initTree",value:function(e,t,n,i){for(var o=void 0,r=void 0,s=0,a=n.length;s<a;s++){o=d(this.opts.templates.treeNode),r=d(this.opts.templates.treeNodeContent),!0===n[s].folder?r.innerHTML='<span class="tree-node-icon"></span><span class="tree-node-title">'+n[s].title+"</span>":null===this.opts.frontIconClassName?r.innerHTML='<span class="tree-node-title">'+n[s].title+"</span>":r.innerHTML='<span class="tree-node-icon"></span><span class="tree-node-title">'+n[s].title+"</span>",r.style.paddingLeft=i*this.opts.paddingLeft+"px",r.nodeData=n[s],this.domRefs.treeNodeContents.push(r),o.appendChild(r),t.appendChild(o),e.appendChild(t);var A=i;if(!0===n[s].folder&&0<n[s].children.length){A++;var l=d(this.opts.templates.treeGroup);this.initTree(o,l,n[s].children,A)}}}},{key:"initState",value:function(){for(var e=this.domRefs.treeNodeContents,t=this.opts,n=t.folderIconClassName,i=t.createTreeNodeContent,o=0,r=e.length;o<r;o++){var s=e[o].nodeData;if(!0===s.folder){if(e[o].setAttribute("role","folder"),e[o].firstChild.classList.add("icon-angle"),n){var a='<span class="tree-folder-icon '+n+'"></span>';e[o].firstChild.insertAdjacentHTML("afterend",a)}!0===s.expand?(e[o].firstChild.classList.add("down"),e[o].setAttribute("expand",!0)):e[o].nextElementSibling.style.display="none"}else e[o].firstChild.classList.add("iconfont"),this.opts.frontIconClassName&&e[o].firstChild.classList.add(this.opts.frontIconClassName);i&&i(e[o],s)}return this}},{key:"appendBaseNode",value:function(){this.opts.baseNode.appendChild(this.domRefs.treeWrapper)}},{key:"slideAnimate",value:function(e){window.requestAnimationFrame||(window.requestAnimationFrame=function(e){setTimeout(e,16.7)});var t=void 0,n=void 0;switch(this.opts.animateSpeed){case"normal":n=10;break;case"fast":n=5;break;case"slow":n=15}var i=e.nextElementSibling;if("false"===e.getAttribute("expand")){t=i.offsetHeight,i.style.overflow="hidden";var o=t;!function e(){if(o-=Math.ceil(t/n),i.style.height=o+"px",0<o-0)return window.requestAnimationFrame(e);i.style.height="",i.style.display="none",i.style.overflow=""}()}else{i.style.display="block",i.style.overflow="hidden",t=i.offsetHeight,i.style.height=0;var r=t,s=0;!function e(){if(s+=Math.ceil(r/n),i.style.height=s+"px",0<r-s)return window.requestAnimationFrame(e);i.style.height=""}()}}},{key:"bindEvent",value:function(){var o=this;return this.clickHandle=function(e){var t=e||window.event,n=t.target||t.srcElement,i="div"===n.tagName.toLowerCase()?n:n.parentNode;i.hasAttribute("expand")?o.toggleExpand(i):o.opts.click&&(o.toggleActive(i),o.opts.click(t,i.nodeData))},this.dblclickHandle=function(e){var t=e||window.event,n=t.target||t.srcElement,i="div"===n.tagName.toLowerCase()?n:n.parentNode;i.hasAttribute("role")||o.opts.dblclick&&(o.toggleActive(i),o.opts.dblclick(t,i.nodeData))},this.domRefs.treeWrapper.addEventListener("click",this.clickHandle,!1),this.domRefs.treeWrapper.addEventListener("dblclick",this.dblclickHandle,!1),this}},{key:"toggleExpand",value:function(e){"true"===e.getAttribute("expand")?(e.firstChild.classList.remove("down"),e.setAttribute("expand","false")):(e.firstChild.classList.add("down"),e.setAttribute("expand","true")),this.slideAnimate(e)}},{key:"toggleActive",value:function(e){this.activeItem&&this.activeItem.classList.remove("active"),e.classList.add("active"),this.activeItem=e}},{key:"removeEvent",value:function(){this.domRefs.treeWrapper.removeEventListener("click",this.clickHandle,!1),this.clickHandle=null}},{key:"getActiveItem",value:function(){if(this.activeItem)return this.activeItem}},{key:"destroyed",value:function(){this.removeEvent(),this.opts.baseNode.removeChild(this.domRefs.treeWrapper)}}]),t}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlVHJlZS5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWluamVjdC9kaXN0L3N0eWxlLWluamVjdC5lcy5qcyIsIi4uL3V0aWxzL2luZGV4LmpzIiwiLi4vc2ltcGxlVHJlZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzdHlsZUluamVjdChjc3MsIHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBpbnNlcnRBdCA9IHJlZi5pbnNlcnRBdDtcblxuICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoaW5zZXJ0QXQgPT09ICd0b3AnKSB7XG4gICAgaWYgKGhlYWQuZmlyc3RDaGlsZCkge1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlSW5qZWN0O1xuIiwiLyoqXHJcbiAqIOWvueixoea1heaLt+i0nVxyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqL1xyXG5jb25zdCBhc3NpZ24gPSBPYmplY3QuYXNzaWduXHJcbiAgPyBPYmplY3QuYXNzaWduXHJcbiAgOiBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBzb3VyY2UpIHtcclxuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIOWvueixoea3seaLt+i0nVxyXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBtYXBba2V5XVxyXG4gKi9cclxuY29uc3QgZGVlcENvcHkgPSBvYmogPT4ge1xyXG4gIGlmICh0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSByZXR1cm47XHJcbiAgY29uc3QgbmV3T2JqID0gb2JqIGluc3RhbmNlb2YgQXJyYXkgPyBbXSA6IHt9O1xyXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICBuZXdPYmpba2V5XSA9XHJcbiAgICAgICAgdHlwZW9mIG9ialtrZXldID09PSBcIm9iamVjdFwiID8gZGVlcENvcHkob2JqW2tleV0pIDogb2JqW2tleV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuZXdPYmo7XHJcbn07XHJcblxyXG4vKipcclxuICogY3JlYXRlTm9kZVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaHRtbFN0clxyXG4gKiBAcmV0dXJucyB7RG9tTm9kZX1cclxuICovXHJcbmNvbnN0IGNyZWF0ZU5vZGUgPSBodG1sU3RyID0+IHtcclxuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIGRpdi5pbm5lckhUTUwgPSBodG1sU3RyO1xyXG4gIHJldHVybiBkaXYuY2hpbGROb2Rlc1swXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDoioLngrnpgInmi6nlmahcclxuICogQHBhcmFtIHtEb21Ob2RlfSBlbFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcclxuICogQHJldHVybnMge0RvbU5vZGV9XHJcbiAqL1xyXG5jb25zdCBxdWVyeSA9IChlbCwgc2VsZWN0b3IpID0+IHtcclxuICByZXR1cm4gZWwucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcclxuICAgID8gZWwucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcclxuICAgIDogY29uc29sZS5lcnJvcihcIkNhbm5vdCBmaW5kIFwiICsgc2VsZWN0b3IgKyBcIiBvZiBlbCFcIik7XHJcbn07XHJcblxyXG4vKipcclxuICog6L+U5Zue5omA5pyJ6IqC54K5XHJcbiAqIEBwYXJhbSB7RG9tTm9kZX0gZWxcclxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXHJcbiAqIEByZXR1cm5zIHtOb2RlTGlzdH1cclxuICovXHJcbmNvbnN0IHF1ZXJ5QWxsID0gKGVsLCBzZWxlY3RvcikgPT4ge1xyXG4gIHJldHVybiBlbC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDoioLmtYHlh73mlbBcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xyXG4gKiBAcGFyYW0ge051bWJlcn0gd2FpdFxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XHJcbiAqL1xyXG5jb25zdCB0aHJvdHRsZSA9IChmdW5jLCB3YWl0LCBvcHRpb25zKSA9PiB7XHJcbiAgbGV0IGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcclxuXHJcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xyXG5cclxuICBsZXQgcHJldmlvdXMgPSAwO1xyXG5cclxuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgY29uc3QgbGF0ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBEYXRlLm5vdygpO1xyXG4gICAgdGltZW91dCA9IG51bGw7XHJcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xyXG5cclxuICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcblxyXG4gICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgIHByZXZpb3VzID0gbm93O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcclxuICAgIGNvbnRleHQgPSB0aGlzO1xyXG4gICAgYXJncyA9IGFyZ3VtZW50cztcclxuXHJcbiAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xyXG4gICAgICBpZiAodGltZW91dCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHJldmlvdXMgPSBub3c7XHJcblxyXG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xyXG5cclxuICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XHJcbiAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XHJcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIOWOu+aKluWHveaVsFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3YWl0XHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW1tZWRpYXRlXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5jb25zdCBkZWJvdW5jZSA9IChmdW5jLCB3YWl0LCBpbW1lZGlhdGUpID0+IHtcclxuICBsZXQgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XHJcblxyXG4gIGNvbnN0IGxhdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbGFzdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGltZXN0YW1wO1xyXG4gICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xyXG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpOyAvLyB3YWl0IC0gbGFzdOWPr+S7peWwkeaJp+ihjOW+iOWkmuasoVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGltZW91dCA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoIWltbWVkaWF0ZSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XHJcbiAgICAgICAgaWYgKCF0aW1lb3V0KSB7XHJcbiAgICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgY29udGV4dCA9IHRoaXM7XHJcbiAgICBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgIC8vIOavj+asoeinpuWPkeWHveaVsO+8jOabtOaWsOaXtumXtOaIs1xyXG4gICAgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgLy8gdGltZW91dOWIpOaWreW+iOmHjeimge+8jOWug+aYr+WIpOaWreaYr+WQpummluasoeinpuWPkeeahOmHjeimgeWtl+autVxyXG5cclxuICAgIGNvbnN0IGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XHJcblxyXG4gICAgLy8g6aaW5qyhdGltZW91dOS4uuiCr+WumuS4um51bGxcclxuICAgIGlmICghdGltZW91dCkge1xyXG4gICAgICAvLyDmraTliIbmlK/lj6rmiafooYzkuIDmrKFcclxuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOeri+WNs+inpuWPkVxyXG4gICAgaWYgKGNhbGxOb3cpIHtcclxuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgLy8g6Kej6Zmk5byV55SoXHJcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDliKTmlq3mmK/lkKbkuLpkb23oioLngrlcclxuICogQHBhcmFtIHtEb21Ob2RlfSBpdGVtXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5jb25zdCBpc0RPTSA9IGl0ZW0gPT4ge1xyXG4gIHJldHVybiB0eXBlb2YgSFRNTEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgPyBpdGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnRcclxuICAgIDogaXRlbSAmJlxyXG4gICAgICAgIHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiICYmXHJcbiAgICAgICAgaXRlbS5ub2RlVHlwZSA9PT0gMSAmJlxyXG4gICAgICAgIHR5cGVvZiBpdGVtLm5vZGVOYW1lID09PSBcInN0cmluZ1wiO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIOWIpOaWreWvueixoeexu+Wei1xyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IG1hcFtrZXldXHJcbiAqL1xyXG5jb25zdCB0eXBlT2YgPSBvYmogPT4ge1xyXG4gIGNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxuICBjb25zdCBtYXAgPSB7XHJcbiAgICBcIltvYmplY3QgQm9vbGVhbl1cIjogXCJib29sZWFuXCIsXHJcbiAgICBcIltvYmplY3QgTnVtYmVyXVwiOiBcIm51bWJlclwiLFxyXG4gICAgXCJbb2JqZWN0IFN0cmluZ11cIjogXCJzdHJpbmdcIixcclxuICAgIFwiW29iamVjdCBGdW5jdGlvbl1cIjogXCJmdW5jdGlvblwiLFxyXG4gICAgXCJbb2JqZWN0IEFycmF5XVwiOiBcImFycmF5XCIsXHJcbiAgICBcIltvYmplY3QgRGF0ZV1cIjogXCJkYXRlXCIsXHJcbiAgICBcIltvYmplY3QgUmVnRXhwXVwiOiBcInJlZ0V4cFwiLFxyXG4gICAgXCJbb2JqZWN0IFVuZGVmaW5lZF1cIjogXCJ1bmRlZmluZWRcIixcclxuICAgIFwiW29iamVjdCBOdWxsXVwiOiBcIm51bGxcIixcclxuICAgIFwiW29iamVjdCBPYmplY3RdXCI6IFwib2JqZWN0XCJcclxuICB9O1xyXG4gIHJldHVybiBtYXBbdG9TdHJpbmcuY2FsbChvYmopXTtcclxufTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgYXNzaWduLFxyXG4gIGRlZXBDb3B5LFxyXG4gIGNyZWF0ZU5vZGUsXHJcbiAgZGVib3VuY2UsXHJcbiAgdGhyb3R0bGUsXHJcbiAgcXVlcnksXHJcbiAgcXVlcnlBbGwsXHJcbiAgaXNET00sXHJcbiAgdHlwZU9mXHJcbn07XHJcbiIsImltcG9ydCAnLi9pbmRleC5sZXNzJztcclxuaW1wb3J0IHsgYXNzaWduLCBjcmVhdGVOb2RlLCBxdWVyeSB9IGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mgc2ltcGxlVHJlZSB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgY29uc3QgZGVmYXVsdE9wdHMgPSB7XHJcbiAgICAgIGJhc2VOb2RlOiBudWxsLFxyXG4gICAgICBwYWRkaW5nTGVmdDogMTYsXHJcbiAgICAgIGFuaW1hdGVTcGVlZDogJ25vcm1hbCcsXHJcbiAgICAgIHRyZWVEYXRhOiBbXSxcclxuICAgICAgZnJvbnRJY29uQ2xhc3NOYW1lOiBudWxsLCAvLyB0aXRsZeWJjemdoueahGljb27nmoRjbGFzc05hbWUgXHJcbiAgICAgIGZvbGRlckljb25DbGFzc05hbWU6IG51bGwsLy8gZm9sZGVy5YmN6Z2iaWNvbueahGNsYXNzTmFtZVxyXG4gICAgICBkYmxjbGljazogbnVsbCxcclxuICAgICAgY2xpY2s6IG51bGwsXHJcbiAgICAgIGNyZWF0ZVRyZWVOb2RlQ29udGVudDogbnVsbCwgLy8g5p6E6YCgdHJlZU5vZGVDb250ZW505pe255qE5Zue6LCD5Ye95pWwXHJcbiAgICAgIHRlbXBsYXRlczoge1xyXG4gICAgICAgIHRyZWVXcmFwcGVyOiBgPGRpdiBjbGFzcz1cInRyZWUtd3JhcHBlclwiPjwvZGl2PmAsXHJcbiAgICAgICAgdHJlZUJhc2VOb2RlOiBgPHVsIGNsYXNzPVwidHJlZS1iYXNlLW5vZGVcIj48L3VsPmAsXHJcbiAgICAgICAgdHJlZU5vZGU6IGA8bGkgY2xhc3M9XCJ0cmVlLW5vZGVcIj48L2xpPmAsXHJcbiAgICAgICAgdHJlZUdyb3VwOiBgPHVsIGNsYXNzPVwidHJlZS1ncm91cFwiPjwvdWw+YCxcclxuICAgICAgICB0cmVlTm9kZUNvbnRlbnQ6IGA8ZGl2IGNsYXNzPVwidHJlZS1ub2RlLWNvbnRlbnRcIj48L2Rpdj5gXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLm9wdHMgPSBhc3NpZ24oe30sIGRlZmF1bHRPcHRzLCBvcHRpb25zKTtcclxuICAgIHRoaXMuZG9tUmVmcyA9IHt9O1xyXG4gICAgdGhpcy5hY3RpdmVJdGVtID0gbnVsbDsvLyDkv53lrZhhY3RpdmVJdGVtXHJcbiAgICAvLyB0aGlzLmFjdGl2ZVRpdGxlID0gbnVsbDtcclxuICAgIHRoaXMuZG9tUmVmcy50cmVlTm9kZUNvbnRlbnRzID0gW107IC8vIOaUtumbhnRyZWUtbm9kZS1jb250ZW50XHJcbiAgICAvLyDlnKjmnIDnu4jmuLLmn5PkuYvliY3vvIzlhYjliJ3lp4vljJboioLngrnjgIFpY29u44CB57uR5a6a5LqL5Lu2XHJcbiAgICB0aGlzLmluaXREb20oKVxyXG4gICAgICAuaW5pdFN0YXRlKClcclxuICAgICAgLmJpbmRFdmVudCgpXHJcbiAgICAgIC5hcHBlbmRCYXNlTm9kZSgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogQG1ldGhvZCBpbml0RG9tKClcclxuICAgICogQHBhcmFtIG51bGxcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gIGluaXREb20oKSB7XHJcbiAgICBpZighKHRoaXMub3B0cy50cmVlRGF0YSBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwidHJlZURhdGEgbXVzdCBiZSBhIEFycmF5IVwiKTtcclxuICAgIH1cclxuICAgIHRoaXMuZG9tUmVmcy50cmVlV3JhcHBlciA9IGNyZWF0ZU5vZGUodGhpcy5vcHRzLnRlbXBsYXRlcy50cmVlV3JhcHBlcik7XHJcbiAgICB0aGlzLmRvbVJlZnMudHJlZUJhc2VOb2RlID0gY3JlYXRlTm9kZSh0aGlzLm9wdHMudGVtcGxhdGVzLnRyZWVCYXNlTm9kZSk7XHJcbiAgICB0aGlzLmluaXRUcmVlKFxyXG4gICAgICB0aGlzLmRvbVJlZnMudHJlZVdyYXBwZXIsXHJcbiAgICAgIHRoaXMuZG9tUmVmcy50cmVlQmFzZU5vZGUsXHJcbiAgICAgIHRoaXMub3B0cy50cmVlRGF0YSxcclxuICAgICAgMFxyXG4gICAgKTtcclxuICAgLy8gdGhpcy5kb21SZWZzLnRyZWVXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuZG9tUmVmcy50cmVlQmFzZU5vZGUpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBcclxuICAvKipcclxuICAgICogQG1ldGhvZCBpbml0VHJlZSgpXHJcbiAgICAqIOmBjeWOhmRhdGEs6YCS5b2S55Sf5oiQIHVsIC0+IGxpIC0+IHVsLi4uXHJcbiAgICAqIOi/memHjOeUqOWkmuWwkeasoWFwcGVuZENoaWxk6YO95LiN5Lya5byV6LW35rWP6KeI5Zmo5Zue5rWB5a+86Ie06aG16Z2i5Y2h6aG/XHJcbiAgICAqIEBwYXJhbSB7Tm9kZX0gZ3JvdXAgdHJlZUdyb3VwKFVMKVxyXG4gICAgKiBAcGFyYW0ge2FycmF5fSBkYXRhIOaVsOaNrua6kFxyXG4gICAgKiBAcGFyYW0ge251bWJlcn0gbGV2ZWwg5bGC57qn5o6n5Yi2XHJcbiAgICAqIEByZXR1cm4gbnVsbFxyXG4gICAgKi9cclxuICBpbml0VHJlZShwYXJlbnROb2RlLCBncm91cCwgZGF0YSwgbGV2ZWwpIHtcclxuICAgIGxldCB0cmVlTm9kZSwgdHJlZU5vZGVDb250ZW50OyAvLyBsaSAtPiBkaXZcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIC8vIOWFiOWIm+W7umxpXHJcbiAgICAgIHRyZWVOb2RlID0gY3JlYXRlTm9kZSh0aGlzLm9wdHMudGVtcGxhdGVzLnRyZWVOb2RlKTtcclxuICAgICAgdHJlZU5vZGVDb250ZW50ID0gY3JlYXRlTm9kZSh0aGlzLm9wdHMudGVtcGxhdGVzLnRyZWVOb2RlQ29udGVudCk7XHJcbiAgICAgIGlmIChkYXRhW2ldLmZvbGRlciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHRyZWVOb2RlQ29udGVudC5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJ0cmVlLW5vZGUtaWNvblwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cInRyZWUtbm9kZS10aXRsZVwiPiR7XHJcbiAgICAgICAgICBkYXRhW2ldLnRpdGxlXHJcbiAgICAgICAgfTwvc3Bhbj5gO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuZnJvbnRJY29uQ2xhc3NOYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICB0cmVlTm9kZUNvbnRlbnQuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidHJlZS1ub2RlLXRpdGxlXCI+JHtcclxuICAgICAgICAgICAgZGF0YVtpXS50aXRsZVxyXG4gICAgICAgICAgfTwvc3Bhbj5gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0cmVlTm9kZUNvbnRlbnQuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidHJlZS1ub2RlLWljb25cIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJ0cmVlLW5vZGUtdGl0bGVcIj4ke1xyXG4gICAgICAgICAgICBkYXRhW2ldLnRpdGxlXHJcbiAgICAgICAgICB9PC9zcGFuPmA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIOiuvue9rnBhZGRpbmdcclxuICAgICAgdHJlZU5vZGVDb250ZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gbGV2ZWwgKiB0aGlzLm9wdHMucGFkZGluZ0xlZnQgKyBcInB4XCI7XHJcbiAgICAgIC8vIOaKiuaVsOaNruWKoOWIsGRpduiKgueCueS4iu+8jOaWueS+v+eCueWHu+aXtuafpeWIsFxyXG4gICAgICB0cmVlTm9kZUNvbnRlbnQubm9kZURhdGEgPSBkYXRhW2ldO1xyXG4gICAgICB0aGlzLmRvbVJlZnMudHJlZU5vZGVDb250ZW50cy5wdXNoKHRyZWVOb2RlQ29udGVudCk7XHJcbiAgICAgIHRyZWVOb2RlLmFwcGVuZENoaWxkKHRyZWVOb2RlQ29udGVudCk7XHJcbiAgICAgIGdyb3VwLmFwcGVuZENoaWxkKHRyZWVOb2RlKTtcclxuICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChncm91cCk7XHJcbiAgICAgIGxldCBncm91cExldmVsID0gbGV2ZWw7XHJcbiAgICAgIGlmIChkYXRhW2ldLmZvbGRlciA9PT0gdHJ1ZSAmJiBkYXRhW2ldLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBncm91cExldmVsKys7XHJcbiAgICAgICAgbGV0IHRyZWVHcm91cCA9IGNyZWF0ZU5vZGUodGhpcy5vcHRzLnRlbXBsYXRlcy50cmVlR3JvdXApO1xyXG4gICAgICAgIHRoaXMuaW5pdFRyZWUodHJlZU5vZGUsIHRyZWVHcm91cCwgZGF0YVtpXS5jaGlsZHJlbiwgZ3JvdXBMZXZlbCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgKiBAbWV0aG9kIGluaXRTdGF0ZSgpXHJcbiAgICAqIOWIneWni+WMlueKtuaAgVxyXG4gICAgKiDlpITnkIZpY29u5bGV56S65ZKMZXhwYW5k5bGe5oCnXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICBpbml0U3RhdGUoKSB7XHJcbiAgICBjb25zdCB7IHRyZWVOb2RlQ29udGVudHMgfSA9IHRoaXMuZG9tUmVmcztcclxuICAgIGNvbnN0IHsgZm9sZGVySWNvbkNsYXNzTmFtZSwgY3JlYXRlVHJlZU5vZGVDb250ZW50fSA9IHRoaXMub3B0cztcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0cmVlTm9kZUNvbnRlbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGxldCBub2RlRGF0YSA9IHRyZWVOb2RlQ29udGVudHNbaV0ubm9kZURhdGE7XHJcbiAgICAgIC8vIOWkhOeQhmljb25cclxuICAgICAgaWYgKG5vZGVEYXRhLmZvbGRlciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHRyZWVOb2RlQ29udGVudHNbaV0uc2V0QXR0cmlidXRlKCdyb2xlJywnZm9sZGVyJyk7XHJcbiAgICAgICAgdHJlZU5vZGVDb250ZW50c1tpXS5maXJzdENoaWxkLmNsYXNzTGlzdC5hZGQoXCJpY29uLWFuZ2xlXCIpO1xyXG4gICAgICAgIGlmKGZvbGRlckljb25DbGFzc05hbWUpIHtcclxuICAgICAgICAgIGNvbnN0IGljb25TdHIgPSBgPHNwYW4gY2xhc3M9XCJ0cmVlLWZvbGRlci1pY29uICR7Zm9sZGVySWNvbkNsYXNzTmFtZX1cIj48L3NwYW4+YDtcclxuICAgICAgICAgIHRyZWVOb2RlQ29udGVudHNbaV0uZmlyc3RDaGlsZC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJyxpY29uU3RyKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm9kZURhdGEuZXhwYW5kID09PSB0cnVlKSB7XHJcbiAgICAgICAgICB0cmVlTm9kZUNvbnRlbnRzW2ldLmZpcnN0Q2hpbGQuY2xhc3NMaXN0LmFkZChcImRvd25cIik7XHJcbiAgICAgICAgICB0cmVlTm9kZUNvbnRlbnRzW2ldLnNldEF0dHJpYnV0ZShcImV4cGFuZFwiLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdHJlZU5vZGVDb250ZW50c1tpXS5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0cmVlTm9kZUNvbnRlbnRzW2ldLmZpcnN0Q2hpbGQuY2xhc3NMaXN0LmFkZChcImljb25mb250XCIpO1xyXG4gICAgICAgIHRoaXMub3B0cy5mcm9udEljb25DbGFzc05hbWUgJiYgdHJlZU5vZGVDb250ZW50c1tpXS5maXJzdENoaWxkLmNsYXNzTGlzdC5hZGQodGhpcy5vcHRzLmZyb250SWNvbkNsYXNzTmFtZSk7XHJcbiAgICAgIH1cclxuICAgICAgY3JlYXRlVHJlZU5vZGVDb250ZW50ICYmIGNyZWF0ZVRyZWVOb2RlQ29udGVudCh0cmVlTm9kZUNvbnRlbnRzW2ldLCBub2RlRGF0YSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgKiBAbWV0aG9kIGFwcGVuZEJhc2VOb2RlKClcclxuICAgICog5riy5p+T5YiwYmFzZeiKgueCueS4ilxyXG4gICAgKiBAcmV0dXJuIG51bGxcclxuICAgICovXHJcbiAgYXBwZW5kQmFzZU5vZGUoKSB7XHJcbiAgICAvLyDml6Dpobvkvb/nlKhjcmVhdGVEb2N1bWVudEZyYWdtZW5077yM5bqV5bGC5bey57uP5LyY5YyW77yM5pyA57uI5Y+q5LyaYXBwZW5kQ2hpbGTkuIDmrKFcclxuICAgIC8vIOaJgOS7peWPquS8muWbnua1geS4gOasoVxyXG4gICAgdGhpcy5vcHRzLmJhc2VOb2RlLmFwcGVuZENoaWxkKHRoaXMuZG9tUmVmcy50cmVlV3JhcHBlcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogQG1ldGhvZCBzbGlkZUFuaW1hdGUoKVxyXG4gICAgKiBzbGlkZeWKqOeUu1xyXG4gICAgKiDpgJLlvZLlsL7kvJjljJZcclxuICAgICog5Y+C6ICDIGh0dHA6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA0L3RhaWwtY2FsbC5odG1sXHJcbiAgICAqIEByZXR1cm4gbnVsbFxyXG4gICAgKi9cclxuICBzbGlkZUFuaW1hdGUodHJlZU5vZGVDb24pIHtcclxuICAgIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZeWFvOWuueaAp+WkhOeQhlxyXG4gICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XHJcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgIHNldFRpbWVvdXQoZm4sIDE2LjcpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8g6K6w5b2V56ys5LiA5qyh6L+b5p2l5pe255qEb2Zmc2V0SGVpZ2h0XHJcbiAgICBsZXQgb2Zmc2V0SGVpZ2h0O1xyXG4gICAgbGV0IHNwZWVkO1xyXG4gICAgc3dpdGNoICh0aGlzLm9wdHMuYW5pbWF0ZVNwZWVkKSB7XHJcbiAgICAgIGNhc2UgJ25vcm1hbCc6XHJcbiAgICAgICAgc3BlZWQgPSAxMDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZmFzdCc6XHJcbiAgICAgICAgc3BlZWQgPSA1O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdzbG93JzpcclxuICAgICAgICBzcGVlZCA9IDE1O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgbGV0IGdyb3VwID0gdHJlZU5vZGVDb24ubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgaWYgKHRyZWVOb2RlQ29uLmdldEF0dHJpYnV0ZSgnZXhwYW5kJykgPT09ICdmYWxzZScpIHtcclxuICAgICAgb2Zmc2V0SGVpZ2h0ID0gZ3JvdXAub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICBncm91cC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gb2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSAwO1xyXG4gICAgICAgIGNvbnN0IHN0ZXAgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3RhbmNlID0gZGlzdGFuY2UgLSBNYXRoLmNlaWwob2Zmc2V0SGVpZ2h0IC8gc3BlZWQpO1xyXG4gICAgICAgICAgICBncm91cC5zdHlsZS5oZWlnaHQgPSBkaXN0YW5jZSArIFwicHhcIjtcclxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIC0gdGFyZ2V0ID4gMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGdyb3VwLnN0eWxlLmhlaWdodCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgZ3JvdXAuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgIGdyb3VwLnN0eWxlLm92ZXJmbG93ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3RlcCgpO1xyXG4gICAgICBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHNsaWRlRG93blxyXG4gICAgICBncm91cC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICBncm91cC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcbiAgICAgIG9mZnNldEhlaWdodCA9IGdyb3VwLm9mZnNldEhlaWdodDtcclxuICAgICAgZ3JvdXAuc3R5bGUuaGVpZ2h0ID0gMDtcclxuICAgICAgLy8gMCAtPiBvZmZzZXRIZWlnaHRcclxuICAgICAgbGV0IGRpc3RhbmNlID0gb2Zmc2V0SGVpZ2h0O1xyXG4gICAgICBsZXQgc3RhcnQgPSAwO1xyXG4gICAgICBjb25zdCBzdGVwID0gKCkgPT4ge1xyXG4gICAgICAgICAgc3RhcnQgPSBzdGFydCArIE1hdGguY2VpbChkaXN0YW5jZSAvIHNwZWVkKTtcclxuICAgICAgICAgIGdyb3VwLnN0eWxlLmhlaWdodCA9IHN0YXJ0ICsgXCJweFwiO1xyXG4gICAgICAgICAgaWYgKGRpc3RhbmNlIC0gc3RhcnQgPiAwKSB7XHJcbiAgICAgICAgICAgICByZXR1cm4gIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDmgaLlpI3pu5jorqTlgLwo6YeN6KaBISEpXHJcbiAgICAgICAgICAgIGdyb3VwLnN0eWxlLmhlaWdodCA9IFwiXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHN0ZXAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgKiBAbWV0aG9kIGJpbmRFdmVudCgpXHJcbiAgICAqIOe7keWumuS6i+S7tijngrnlh7vlkozlj4zlh7vkuovku7YpXHJcbiAgICAqIOS9v+eUqOS6i+S7tuWnlOaJmFxyXG4gICAgKiDljIXlkKtzbGlkZeWKqOeUu+aViOaenFxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgYmluZEV2ZW50KCkge1xyXG4gICAgLy8g54K55Ye75LqL5Lu2XHJcbiAgICB0aGlzLmNsaWNrSGFuZGxlID0gZXZ0ID0+IHtcclxuICAgICAgY29uc3QgZSA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcclxuICAgICAgY29uc3QgdGFnTmFtZSA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIC8vIOmcgOimgeWIpOaWreeahOaguOW/g+aYr3RyZWVOb2RlQ29udGVudOi/meS4qmRpduiKgueCuVxyXG4gICAgICBjb25zdCB0cmVlTm9kZUNvbiA9IHRhZ05hbWUgPT09ICdkaXYnID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGU7XHJcbiAgICAgIGlmICh0cmVlTm9kZUNvbi5oYXNBdHRyaWJ1dGUoXCJleHBhbmRcIikpIHtcclxuICAgICAgICB0aGlzLnRvZ2dsZUV4cGFuZCh0cmVlTm9kZUNvbik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gdGhpcy50b2dnbGVBY3RpdmUodHJlZU5vZGVDb24pO1xyXG4gICAgICAgIGlmKHRoaXMub3B0cy5jbGljaykge1xyXG4gICAgICAgICAgdGhpcy50b2dnbGVBY3RpdmUodHJlZU5vZGVDb24pO1xyXG4gICAgICAgICAgdGhpcy5vcHRzLmNsaWNrKGUsIHRyZWVOb2RlQ29uLm5vZGVEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8g5Y+M5Ye75LqL5Lu2XHJcbiAgICB0aGlzLmRibGNsaWNrSGFuZGxlID0gZXZ0ID0+IHtcclxuICAgICAgY29uc3QgZSA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcclxuICAgICAgY29uc3QgdGFnTmFtZSA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGNvbnN0IHRyZWVOb2RlQ29uID0gdGFnTmFtZSA9PT0gJ2RpdicgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgaWYoIXRyZWVOb2RlQ29uLmhhc0F0dHJpYnV0ZSgncm9sZScpKSB7XHJcbiAgICAgICAgLy8gbGV0IHNwYW5UaXRsZSA9IHF1ZXJ5KHRyZWVOb2RlQ29uLCcudHJlZS1ub2RlLXRpdGxlJyk7XHJcbiAgICAgICAgLy8gdGhpcy50b2dnbGVJdGFsaWMoc3BhblRpdGxlKTtcclxuICAgICAgICAvLyBzcGFuVGl0bGUgPSBudWxsOy8vIOa4hemZpOWPmOmHj+W8leeUqFxyXG4gICAgICAgIC8vIGNhbGxiYWNrXHJcbiAgICAgICAgaWYodGhpcy5vcHRzLmRibGNsaWNrKSB7XHJcbiAgICAgICAgICB0aGlzLnRvZ2dsZUFjdGl2ZSh0cmVlTm9kZUNvbik7XHJcbiAgICAgICAgICB0aGlzLm9wdHMuZGJsY2xpY2soZSwgdHJlZU5vZGVDb24ubm9kZURhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBcclxuICAgIFxyXG4gICAgdGhpcy5kb21SZWZzLnRyZWVXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNsaWNrSGFuZGxlLCBmYWxzZSk7XHJcbiAgICB0aGlzLmRvbVJlZnMudHJlZVdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLmRibGNsaWNrSGFuZGxlLCBmYWxzZSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgKiBAbWV0aG9kIHRvZ2dsZUV4cGFuZCgpXHJcbiAgICAqIOaKmOWPoOWIh+aNolxyXG4gICAgKiBAcmV0dXJuIG51bGxcclxuICAgICovXHJcbiAgdG9nZ2xlRXhwYW5kKHRyZWVOb2RlQ29uKSB7XHJcbiAgICBpZih0cmVlTm9kZUNvbi5nZXRBdHRyaWJ1dGUoXCJleHBhbmRcIikgPT09IFwidHJ1ZVwiKSB7XHJcbiAgICAgIHRyZWVOb2RlQ29uLmZpcnN0Q2hpbGQuY2xhc3NMaXN0LnJlbW92ZShcImRvd25cIik7XHJcbiAgICAgIHRyZWVOb2RlQ29uLnNldEF0dHJpYnV0ZShcImV4cGFuZFwiLCBcImZhbHNlXCIpO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICB0cmVlTm9kZUNvbi5maXJzdENoaWxkLmNsYXNzTGlzdC5hZGQoXCJkb3duXCIpO1xyXG4gICAgICB0cmVlTm9kZUNvbi5zZXRBdHRyaWJ1dGUoXCJleHBhbmRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gc2xpZGXliqjnlLtcclxuICAgIHRoaXMuc2xpZGVBbmltYXRlKHRyZWVOb2RlQ29uKTtcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAqIEBtZXRob2QgdG9nZ2xlQWN0aXZlKClcclxuICAgICogQHBhcmFtICBOb2RlIHRyZWVOb2RlQ29uXHJcbiAgICAqIOWIh+aNoumrmOS6rlxyXG4gICAgKi9cclxuICB0b2dnbGVBY3RpdmUodHJlZU5vZGVDb24pIHtcclxuICAgIHRoaXMuYWN0aXZlSXRlbSAmJiB0aGlzLmFjdGl2ZUl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICB0cmVlTm9kZUNvbi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgdGhpcy5hY3RpdmVJdGVtID0gdHJlZU5vZGVDb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogQG1ldGhvZCB0b2dnbGVJdGFsaWMoKVxyXG4gICAgKiBAcGFyYW0gIE5vZGUgc3BhblRpdGxlXHJcbiAgICAqIOWIh+aNoumrmOS6rlxyXG4gICAgKi9cclxuICAvLyB0b2dnbGVJdGFsaWMoc3BhblRpdGxlKSB7XHJcbiAgLy8gICB0aGlzLmFjdGl2ZVRpdGxlICYmIHRoaXMuYWN0aXZlVGl0bGUuY2xhc3NMaXN0LnJlbW92ZSgnaXRhbGljJyk7XHJcbiAgLy8gICBzcGFuVGl0bGUuY2xhc3NMaXN0LmFkZCgnaXRhbGljJyk7XHJcbiAgLy8gICB0aGlzLmFjdGl2ZVRpdGxlID0gc3BhblRpdGxlO1xyXG4gIC8vIH1cclxuIFxyXG4gIC8qKlxyXG4gICAgKiBAbWV0aG9kIHJlbW92ZUV2ZW50KClcclxuICAgICog5riF6Zmk57uR5a6a5LqL5Lu2XHJcbiAgICAqIEByZXR1cm4gbnVsbFxyXG4gICAgKi9cclxuICByZW1vdmVFdmVudCgpIHtcclxuICAgIHRoaXMuZG9tUmVmcy50cmVlV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG4gICAgICBcImNsaWNrXCIsXHJcbiAgICAgIHRoaXMuY2xpY2tIYW5kbGUsXHJcbiAgICAgIGZhbHNlXHJcbiAgICApO1xyXG4gICAgLy8gdGhpcy5kb21SZWZzLnRyZWVXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcbiAgICAvLyAgIFwiZGJsY2xpY2tcIixcclxuICAgIC8vICAgdGhpcy5kYmxjbGlja0hhbmRsZSxcclxuICAgIC8vICAgZmFsc2VcclxuICAgIC8vICk7XHJcbiAgICB0aGlzLmNsaWNrSGFuZGxlID0gbnVsbDtcclxuICAgIC8vIHRoaXMuZGJsY2xpY2tIYW5kbGUgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAqIEBtZXRob2QgZ2V0QWN0aXZlSXRlbSgpXHJcbiAgICAqIOiOt+WPlumrmOS6rueahOiKgueCuVxyXG4gICAgKiBAcmV0dXJuIE5vZGVcclxuICAgICovXHJcbiAgZ2V0QWN0aXZlSXRlbSgpIHtcclxuICAgIGlmKHRoaXMuYWN0aXZlSXRlbSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hY3RpdmVJdGVtO1xyXG4gICAgfVxyXG4gIH1cclxuIFxyXG4gIC8qKlxyXG4gICAgKiBAbWV0aG9kIGRlc3Ryb3llZCgpXHJcbiAgICAqIOmUgOavgVRyZWXoioLngrlcclxuICAgICogQHJldHVybiBudWxsXHJcbiAgICAqL1xyXG4gIGRlc3Ryb3llZCgpIHtcclxuICAgIHRoaXMucmVtb3ZlRXZlbnQoKTtcclxuICAgIHRoaXMub3B0cy5iYXNlTm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRvbVJlZnMudHJlZVdyYXBwZXIpOyAgXHJcbiAgfTtcclxuXHJcbn1cclxuXHJcbiJdLCJuYW1lcyI6WyJjc3MiLCJyZWYiLCJpbnNlcnRBdCIsImRvY3VtZW50IiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImZpcnN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJhc3NpZ24iLCJPYmplY3QiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY3JlYXRlTm9kZSIsImRpdiIsImlubmVySFRNTCIsImh0bWxTdHIiLCJjaGlsZE5vZGVzIiwib3B0aW9ucyIsIm9wdHMiLCJkb21SZWZzIiwiYWN0aXZlSXRlbSIsInRyZWVOb2RlQ29udGVudHMiLCJpbml0RG9tIiwiaW5pdFN0YXRlIiwiYmluZEV2ZW50IiwiYXBwZW5kQmFzZU5vZGUiLCJ0aGlzIiwidHJlZURhdGEiLCJBcnJheSIsIlR5cGVFcnJvciIsInRyZWVXcmFwcGVyIiwidGVtcGxhdGVzIiwidHJlZUJhc2VOb2RlIiwiaW5pdFRyZWUiLCJwYXJlbnROb2RlIiwiZ3JvdXAiLCJkYXRhIiwibGV2ZWwiLCJ0cmVlTm9kZSIsInRyZWVOb2RlQ29udGVudCIsImxlbiIsImZvbGRlciIsInRpdGxlIiwiZnJvbnRJY29uQ2xhc3NOYW1lIiwicGFkZGluZ0xlZnQiLCJub2RlRGF0YSIsInB1c2giLCJncm91cExldmVsIiwiY2hpbGRyZW4iLCJ0cmVlR3JvdXAiLCJmb2xkZXJJY29uQ2xhc3NOYW1lIiwiY3JlYXRlVHJlZU5vZGVDb250ZW50Iiwic2V0QXR0cmlidXRlIiwiY2xhc3NMaXN0IiwiYWRkIiwiaWNvblN0ciIsImluc2VydEFkamFjZW50SFRNTCIsImV4cGFuZCIsIm5leHRFbGVtZW50U2libGluZyIsImRpc3BsYXkiLCJiYXNlTm9kZSIsInRyZWVOb2RlQ29uIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm4iLCJvZmZzZXRIZWlnaHQiLCJzcGVlZCIsImFuaW1hdGVTcGVlZCIsImdldEF0dHJpYnV0ZSIsIm92ZXJmbG93IiwiZGlzdGFuY2UiLCJzdGVwIiwiTWF0aCIsImNlaWwiLCJoZWlnaHQiLCJzdGFydCIsImNsaWNrSGFuZGxlIiwiZSIsImV2dCIsImV2ZW50Iiwic3JjRWxlbWVudCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImhhc0F0dHJpYnV0ZSIsInRvZ2dsZUV4cGFuZCIsIl90aGlzIiwiY2xpY2siLCJ0b2dnbGVBY3RpdmUiLCJkYmxjbGlja0hhbmRsZSIsImRibGNsaWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsInNsaWRlQW5pbWF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudCIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoidUxBQUEsU0FBcUJBLEVBQUtDLFFBQ1gsSUFBUkEsSUFBaUJBLEVBQU0sSUFDNUIsSUFBSUMsRUFBV0QsRUFBSUMsU0FFbkIsR0FBS0YsR0FBMkIsb0JBQWJHLFNBQW5CLENBRUEsSUFBSUMsRUFBT0QsU0FBU0MsTUFBUUQsU0FBU0UscUJBQXFCLFFBQVEsR0FDOURDLEVBQVFILFNBQVNJLGNBQWMsU0FDbkNELEVBQU1FLEtBQU8sV0FFSSxRQUFiTixHQUNFRSxFQUFLSyxXQUNQTCxFQUFLTSxhQUFhSixFQUFPRixFQUFLSyxZQUtoQ0wsRUFBS08sWUFBWUwsR0FHZkEsRUFBTU0sV0FDUk4sRUFBTU0sV0FBV0MsUUFBVWIsRUFFM0JNLEVBQU1LLFlBQVlSLFNBQVNXLGVBQWVkLGl2SUNsQnhDZSxFQUFTQyxPQUFPRCxPQUNsQkMsT0FBT0QsT0FDUCxTQUFTRSxPQUNGLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMs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
