{"version":3,"file":"simpleTree2.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utils/index.ts","../src/Tree2/index.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/**\n * 对象浅拷贝\n * @param {Object} target\n * @returns {Object}\n */\n\ntype AssignTarget  = {\n  [x: string]: any;\n}\nexport const assign = Object.assign\n  ? Object.assign\n  : function(target: Object): Object {\n      for (let i = 1; i < arguments.length; i++) {\n        const source = arguments[i];\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            (<AssignTarget>target)[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n\n\n/**\n * createNode\n * @param {String} htmlStr\n * @returns {DomNode}\n */\nexport const createNode = (htmlStr: string): any => {\n  const div = document.createElement('div');\n  div.innerHTML = htmlStr;\n  return div.children[0];\n};\n\nexport type ElementObjType<T> = {\n  tagName: T;\n  className: string;\n}\n\n/**\n * createNode\n * @param {String} htmlStr\n * @returns {DomNode}\n */\nexport const createElementByObj = <T extends keyof HTMLElementTagNameMap>(elementObj: ElementObjType<T>): HTMLElementTagNameMap[T] => {\n  const { tagName, className } = elementObj;\n  const element = document.createElement(tagName);\n  element.className = className;\n  return element;\n};\n\n/**\n * 节点选择器\n * @param {DomNode} el\n * @param {String} selector\n * @returns {DomNode}\n */\nexport const query = (el: HTMLElement, selector: string): HTMLElement | null => {\n  return el.querySelector(selector)\n    ? el.querySelector(selector)\n    : null\n};\n\n/**\n * 返回所有节点\n * @param {DomNode} el\n * @param {String} selector\n * @returns {NodeList}\n */\nexport const queryAll = (el: HTMLElement, selector: string): NodeList => {\n  return el.querySelectorAll(selector);\n};\n\n/**\n * 判断是否为dom节点\n * @param {DomNode} item\n * @returns\n */\nexport const isDOM = (item: HTMLElement): boolean => {\n  return typeof HTMLElement === 'function'\n    ? item instanceof HTMLElement\n    : item && typeof item === 'object' && item.nodeType === 1 && typeof item.nodeName === 'string';\n};\n\n// 判断是否有子节点\ntype NodeData = {\n  children?: [];\n}\n\nexport const hasChild = (nodeData: NodeData): boolean => {\n  if (nodeData.children == null) {\n    return false;\n  }\n  // 空目录支持\n  if (nodeData.children.length === 0) {\n    return true;\n  }\n  return nodeData.children.length > 0;\n};\n\n// 下一帧执行\nexport const nextFrame = (fn: () => void) => {\n  if (window.requestAnimationFrame) {\n    window.requestAnimationFrame(fn)\n  } else {\n    window.setTimeout(fn, 16)\n  }\n}\n","import './index.less';\nimport { createNode, hasChild, nextFrame } from '../utils/index';\n\n// 构造参数\nexport interface Options {\n  baseNode: HTMLElement;\n  treeData: TreeNodeData[];\n  paddingLeft: number;\n  titleKey: string; // 标题取对象哪个字段\n  templates: OptTemplate;\n  click?: (data: FlatTreeNode, e?: Event) => {};\n  createNodeContent?: (nodeElement: TreeNodeElement, data: FlatTreeNode) => void;\n}\n\n// 渲染源数据\nexport interface TreeNodeData {\n  title?: string;\n  expand?: boolean;\n  selected?: boolean;\n  children?: [];\n  createNodeContent?: (nodeElement: TreeNodeElement, data: FlatTreeNode) => void;\n}\n\n// 扁平化树的节点数据\nexport interface FlatTreeNode {\n  nodeData: TreeNodeData;\n  _key: number;\n  _parentKey?: number;\n  _childNodeKeys?: number[];\n  _level: number;\n  _isFolder: boolean;\n}\n\nexport interface OptTemplate {\n  treeWrapper: string;\n  treeNode: string;\n  animateNode: string;\n}\n\n// dom对象新增属性加$$\nexport interface TreeNodeElement extends HTMLElement {\n  $$nodeData: FlatTreeNode;\n}\n\nexport interface AnimateNodeElement extends HTMLElement {\n  $$transitionendHandle?: null | (() => void);\n}\n\nconst PRECLSNAME = 'simple-tree';\nconst TRANSITIONEND =\n  window.ontransitionend === undefined ? 'webkitTransitionEnd' : 'transitionend';\n\nexport default class SimpleTree2 {\n  opts: Options;\n  activeNodeKey?: number;\n  domRefs: {\n    treeWrapper: HTMLElement;\n  };\n  clickHandle: ((e: Event) => void) | null;\n  flatTreeData: FlatTreeNode[];\n  static version: string;\n\n  constructor(options: Options) {\n    const defaultOpts = {\n      baseNode: null,\n      paddingLeft: 16,\n      treeData: [],\n      titleKey: 'title', // 标题取对象哪个字段\n      createTreeNodeContent: null, // 构造treeNodeContent时的回调函数\n      templates: {\n        treeWrapper: `<div class=\"${PRECLSNAME} tree-wrapper\"></div>`,\n        treeNode: `<div class=\"tree-node\"></div>`,\n        animateNode: `<div class=\"animate-node\"></div>`\n      }\n    };\n\n    this.opts = { ...defaultOpts, ...options };\n    this.domRefs = {\n      treeWrapper: createNode(this.opts.templates.treeWrapper)\n    };\n\n    this.clickHandle = null;\n    this.flatTreeData = [];\n\n    this.initData().createTree().bindEvent().mountNode();\n  }\n\n  /**\n   * @method initData\n   * @description 初始化数据\n   * @return {this}\n   */\n  initData(): SimpleTree2 {\n    if (!(this.opts.treeData instanceof Array)) {\n      throw new TypeError('treeData must be an Array!');\n    }\n\n    this.flatTreeData = this.genFlatTreeData(this.opts.treeData);\n    return this;\n  }\n\n  /**\n   * @method initData\n   * @description 创建树dom对象\n   * @return {this}\n   */\n  createTree(): SimpleTree2 {\n    const wrapperNode = this.domRefs.treeWrapper;\n    const renderData = this.flatTreeData;\n\n    // 收集不渲染的节点\n    const unableRenderNodes: number[] = [];\n\n    for (let i = 0; i < renderData.length; i++) {\n      // 如果目录节点收缩，叶子节点全部不渲染\n      const renderNodeData = renderData[i];\n      const { nodeData, _isFolder, _key } = renderNodeData;\n      const { expand } = nodeData;\n\n      if (_isFolder) {\n        // 如果该目录节点不渲染，也需要收集它的叶子节点\n        if (!expand || unableRenderNodes.indexOf(_key) !== -1) {\n          const { _childNodeKeys } = renderNodeData;\n          _childNodeKeys && _childNodeKeys.forEach((key) => unableRenderNodes.push(key));\n        }\n      }\n\n      if (unableRenderNodes.indexOf(_key) !== -1) {\n        continue;\n      }\n\n      const treeNode = this.createTreeNode(renderNodeData);\n      wrapperNode?.appendChild(treeNode);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method bindEvent\n   * @description 绑定事件, 使用事件委托\n   * @return {this}\n   */\n  bindEvent() {\n    // 点击事件\n    this.clickHandle = (evt: Event) => {\n      const target = evt.target as HTMLElement;\n      const tagName = target.tagName.toLowerCase();\n      // 需要判断的核心是treeNodeContent这个div节点\n      const treeNode = (tagName === 'div' ? target : target.parentNode) as TreeNodeElement;\n      // 判断是否为展开节点\n      if (treeNode.$$nodeData._isFolder) {\n        this.toggleExpand(treeNode);\n      } else if (this.opts.click) {\n        this.toggleActive(treeNode);\n        this.opts.click(treeNode.$$nodeData, evt);\n      }\n    };\n\n    this.domRefs.treeWrapper?.addEventListener('click', this.clickHandle, false);\n\n    return this;\n  }\n\n  /**\n   * @method mountNode\n   * @description 挂载树节点\n   */\n  mountNode() {\n    const baseNode = this.opts.baseNode;\n    this.domRefs.treeWrapper && baseNode.appendChild(this.domRefs.treeWrapper);\n  }\n\n  /**\n   * @method createTreeNode\n   * @description 创建树节点\n   * @param {FlatTreeNode} 树节点data\n   * @return {TreeNodeElement} 节点dom对象\n   */\n  createTreeNode(data: FlatTreeNode): TreeNodeElement {\n    // 缓存 titleKey\n    const titleKey = this.opts.titleKey;\n\n    const { paddingLeft, createNodeContent } = this.opts;\n    const { nodeData, _isFolder, _key } = data;\n    const { expand } = nodeData;\n\n    const treeNode: TreeNodeElement = createNode(this.opts.templates.treeNode);\n\n    Object.defineProperty(treeNode, '$$nodeData', {\n      value: data\n    });\n\n    treeNode.dataset.nodekey = _key.toString();\n\n    if (_isFolder) {\n      treeNode.innerHTML = `<span class=\"tree-node-icon icon-angle ${\n        expand && 'down'\n      }\"></span><span class=\"tree-node-title\">${nodeData[titleKey]}</span>`;\n      treeNode.style.paddingLeft = `${data._level * paddingLeft}px`;\n    } else {\n      treeNode.innerHTML = `<span class=\"tree-node-title\">${nodeData[titleKey]}</span>`;\n      treeNode.style.paddingLeft = `${data._level * paddingLeft}px`;\n    }\n\n    // 节点对象createNodeContent优先\n    if (nodeData.createNodeContent) {\n      nodeData.createNodeContent(treeNode, data);\n    } else if (createNodeContent) {\n      createNodeContent(treeNode, data);\n    }\n\n    if (nodeData.selected) {\n      treeNode.classList.add('active');\n      this.activeNodeKey = data._key;\n    }\n\n    return treeNode;\n  }\n\n  /**\n   * @method toggleExpand\n   * @description 折叠切换\n   * @param {TreeNodeData} 点击的节点\n   */\n  toggleExpand(treeNode: TreeNodeElement) {\n    const firstChild = treeNode.firstChild as HTMLElement;\n    const { $$nodeData } = treeNode;\n\n    if ($$nodeData.nodeData.expand) {\n      firstChild.classList.remove('down');\n      $$nodeData.nodeData.expand = false;\n      this.slideAnimate(treeNode, 'up');\n    } else {\n      firstChild.classList.add('down');\n      $$nodeData.nodeData.expand = true;\n      this.slideAnimate(treeNode, 'down');\n    }\n  }\n\n  /**\n   * @method toggleActive\n   * @description 切换高亮\n   * @param  {TreeNodeElement} treeNode\n   */\n  toggleActive(treeNode: TreeNodeElement) {\n    if (this.activeNodeKey) {\n      const oldKey = this.activeNodeKey;\n      const oldNode = this.findNodeDomByKey(oldKey) as TreeNodeElement;\n      const oldNodeData = this.findNodeByKey(oldKey);\n      oldNodeData && (oldNodeData.nodeData.selected = false);\n      oldNode && oldNode.classList.remove('active');\n    }\n\n    this.activeNodeKey = treeNode.$$nodeData._key;\n    const newNode = this.findNodeDomByKey(this.activeNodeKey) as TreeNodeElement;\n    const newNodeData = this.findNodeByKey(this.activeNodeKey);\n    newNodeData && (newNodeData.nodeData.selected = true);\n    newNode && newNode.classList.add('active');\n  }\n\n  /**\n   * @method toggleExpand\n   * @description 折叠切换\n   * @param {TreeNodeElement} treeNode 点击的节点\n   * @param {'down' | 'up'} pos 方向\n   * @return null\n   */\n  slideAnimate(treeNode: TreeNodeElement, pos: 'down' | 'up') {\n    const { _childNodeKeys } = treeNode.$$nodeData;\n    const childKeyList = _childNodeKeys && this.collectTreeNodeChildKeyList(_childNodeKeys);\n    const animateNode = createNode(this.opts.templates.animateNode) as AnimateNodeElement;\n\n    Object.defineProperty(animateNode, '$$transitionendHandle', {\n      value: () => this.transitionendHandle(animateNode, treeNode),\n      writable: true,\n      configurable: true\n    });\n\n    animateNode.$$transitionendHandle &&\n      animateNode.addEventListener(TRANSITIONEND, animateNode.$$transitionendHandle, false);\n\n    if (pos === 'up') {\n      childKeyList &&\n        childKeyList.forEach((key) => {\n          const ele = this.findNodeDomByKey(key);\n          ele && animateNode.appendChild(ele);\n        });\n\n      if (animateNode.children.length === 0) {\n        return;\n      }\n\n      nextFrame(() => {\n        treeNode.insertAdjacentElement('afterend', animateNode);\n        const height = animateNode.offsetHeight;\n        animateNode.style.cssText = `transition: height 0.3s ease;overflow: hidden;`;\n        animateNode.style.height = `${height}px`;\n        nextFrame(() => (animateNode.style.height = '0'));\n      });\n    }\n\n    if (pos === 'down') {\n      childKeyList &&\n        childKeyList.forEach((key) => {\n          const data = this.findNodeByKey(key);\n          const ele = this.createTreeNode(data);\n          animateNode.appendChild(ele);\n        });\n\n      if (animateNode.children.length === 0) {\n        return;\n      }\n\n      nextFrame(() => {\n        treeNode.insertAdjacentElement('afterend', animateNode);\n        const height = animateNode.offsetHeight;\n        animateNode.style.cssText = `transition: height 0.3s ease;overflow: hidden;`;\n        animateNode.style.height = '0';\n        nextFrame(() => (animateNode.style.height = `${height}px`));\n      });\n    }\n  }\n\n  /**\n   * @method collectTreeNodeChildKeyList\n   * @description 收集某个节点所有层级的子节点key\n   * @param {number[]} childNodeKeys\n   * @return {number[]} child\n   */\n  collectTreeNodeChildKeyList(childNodeKeys: number[]) {\n    const flatTreeData = this.flatTreeData;\n    const list: number[] = [];\n    function _collect(nodeKeys) {\n      nodeKeys.forEach((nodeKey) => {\n        const node = flatTreeData[nodeKey];\n        if (node._childNodeKeys) {\n          list.push(nodeKey);\n          if (node.nodeData.expand === true) {\n            _collect(node._childNodeKeys);\n          }\n        } else {\n          list.push(nodeKey);\n        }\n      });\n    }\n    _collect(childNodeKeys);\n    return list;\n  }\n\n  /**\n   * @method genFlatTreeData\n   * @description 扁平化成一级树结构\n   * @param {TreeNodeData} treeData\n   * @return {FlatTreeNode[]}\n   */\n  genFlatTreeData(treeData: TreeNodeData[]): FlatTreeNode[] {\n    const flatTree: FlatTreeNode[] = [];\n    let keyCount = 0;\n\n    function _flat(node: TreeNodeData, parent?: FlatTreeNode, level = 0) {\n      const key = keyCount++;\n      flatTree[key] = {\n        nodeData: node,\n        _key: key,\n        _level: level,\n        _isFolder: false\n      };\n      if (parent && parent._key >= 0) {\n        flatTree[key]._parentKey = parent._key;\n        flatTree[parent._key]._childNodeKeys?.push(key);\n      }\n\n      if (hasChild(node)) {\n        flatTree[key]._isFolder = true;\n        flatTree[key]._childNodeKeys = [];\n        node.children?.forEach((child) => _flat(child, flatTree[key], level + 1));\n      }\n    }\n\n    treeData.forEach((rootNode) => {\n      _flat(rootNode);\n    });\n\n    return flatTree;\n  }\n\n  /**\n   * @method transitionendHandle\n   * @description 过渡事件\n   * @return null\n   */\n  transitionendHandle(animateNode: AnimateNodeElement, treeNode: TreeNodeElement) {\n    const isShow = animateNode.style.height !== '0px';\n\n    if (isShow) {\n      for (let i = animateNode.children.length - 1; i >= 0; i--) {\n        treeNode.insertAdjacentElement('afterend', animateNode.children[i]);\n      }\n      this.domRefs.treeWrapper.removeChild(animateNode);\n    } else {\n      this.domRefs.treeWrapper.removeChild(animateNode);\n    }\n\n    // 执行完解绑\n    animateNode.$$transitionendHandle &&\n      animateNode.removeEventListener(TRANSITIONEND, animateNode.$$transitionendHandle);\n    animateNode.$$transitionendHandle = null;\n    delete animateNode.$$transitionendHandle;\n  }\n\n  /**\n   * @method removeEvent\n   * @description 清除绑定事件\n   */\n  removeEvent() {\n    this.clickHandle && this.domRefs.treeWrapper.removeEventListener('click', this.clickHandle, false);\n    this.clickHandle = null;\n  }\n\n  /**\n   * @method findNodeByKey\n   * @description 根据节点key在flatTreeData中找对应节点\n   * @param {number} key 节点key\n   * @returns {FlatTreeNode} 节点对象\n   */\n  findNodeByKey(key: number): FlatTreeNode {\n    return this.flatTreeData[key];\n  }\n\n  /**\n   * @method findNodeDomByKey\n   * @description 根据节点key在treeWrapper中找对应节点\n   * @param {number} key 节点key\n   * @returns {TreeNodeElement | null} 节点dom对象 | null\n   */\n  findNodeDomByKey(key: number): TreeNodeElement | null {\n    return this.domRefs.treeWrapper.querySelector(`div[data-nodekey='${key}']`);\n  }\n\n  /**\n   * @method destroyed\n   * @description 销毁Tree节点\n   */\n  destroyed() {\n    this.flatTreeData = [];\n    this.removeEvent();\n    this.opts.baseNode.removeChild(this.domRefs.treeWrapper);\n  }\n}\n\nSimpleTree2.version = '1.0';\n"],"names":[],"mappings":"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"}