{"version":3,"file":"simpleTree.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utils/index.ts","../src/simpleTree/index.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/**\n * 对象浅拷贝\n * @param {Object} target\n * @returns {Object}\n */\n\ntype AssignTarget  = {\n  [x: string]: any;\n}\nexport const assign = Object.assign\n  ? Object.assign\n  : function(target: Object): Object {\n      for (let i = 1; i < arguments.length; i++) {\n        const source = arguments[i];\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            (<AssignTarget>target)[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n\n\n/**\n * createNode\n * @param {String} htmlStr\n * @returns {DomNode}\n */\nexport const createNode = (htmlStr: string): any => {\n  const div = document.createElement('div');\n  div.innerHTML = htmlStr;\n  return div.childNodes[0];\n};\n\n/**\n * 节点选择器\n * @param {DomNode} el\n * @param {String} selector\n * @returns {DomNode}\n */\nexport const query = (el: HTMLElement, selector: string): HTMLElement | null => {\n  return el.querySelector(selector)\n    ? el.querySelector(selector)\n    : null\n};\n\n/**\n * 返回所有节点\n * @param {DomNode} el\n * @param {String} selector\n * @returns {NodeList}\n */\nexport const queryAll = (el: HTMLElement, selector: string): NodeList => {\n  return el.querySelectorAll(selector);\n};\n\n/**\n * 判断是否为dom节点\n * @param {DomNode} item\n * @returns\n */\nexport const isDOM = (item: HTMLElement): boolean => {\n  return typeof HTMLElement === 'function'\n    ? item instanceof HTMLElement\n    : item && typeof item === 'object' && item.nodeType === 1 && typeof item.nodeName === 'string';\n};\n\n// 判断是否有子节点\ntype NodeData = {\n  children?: [];\n}\n\nexport const hasChild = (nodeData: NodeData): boolean => {\n  if (!nodeData.children) {\n    return false;\n  }\n  return nodeData.children.length !== 0;\n};\n\n// 下一帧执行\nexport const nextFrame = (fn: () => void) => {\n  if (window.requestAnimationFrame) {\n    window.requestAnimationFrame(fn)\n  } else {\n    window.setTimeout(fn, 16)\n  }\n}\n","import './index.less';\nimport { assign, createNode, hasChild, nextFrame } from '../utils/index';\n\nconst PRECLSNAME = 'simple-tree';\nconst TRANSITIONEND =\n  window.ontransitionend === undefined ? 'webkitTransitionEnd' : 'transitionend';\n\n// 渲染源数据\nexport interface TreeData {\n  title?: string;\n  expand?: boolean;\n  children?: [];\n  createNodeContent?: (node: ExtendNode, nodeData: TreeData) => void;\n  [key: string]: any;\n}\n\n// 构造参数\nexport interface Options {\n  baseNode: HTMLElement;\n  treeData: TreeData[];\n  paddingLeft: number;\n  titleKey: string; // 标题取对象哪个字段\n  templates: OptTemplate;\n  dblclick?: (e: Event, data: TreeData) => {};\n  click?: (e: Event, data: TreeData) => {};\n  createNodeContent?: (node: ExtendNode, nodeData: TreeData) => void;\n}\n\nexport interface OptTemplate {\n  treeWrapper: string;\n  treeBaseNode: string;\n  treeNode: string;\n  treeGroup: string;\n  treeNodeContent: string;\n}\n\n// 收集相关节点ref\n// interface DomRefs<T> {\n//   treeNodeContents: T[];\n//   treeWrapper: T;\n//   treeBaseNode: T;\n// }\n\nexport interface SimpleTreeItf {\n  opts: Options;\n  activeItem: HTMLElement | null;\n  destroyed(): void;\n  getActiveItem(): HTMLElement | null;\n}\n\nexport interface ExtendNode extends HTMLElement {\n  $$nodeData: TreeData;\n  $$transitionendHandle?: any;\n}\n\nexport default class SimpleTree implements SimpleTreeItf {\n  opts: Options;\n  activeItem: HTMLElement | null;\n  domRefs: any;\n  clickHandle: ((e: Event) => void) | null;\n  dblclickHandle: ((e: Event) => void) | null;\n  static version: string;\n\n  constructor(options: Options) {\n    const defaultOpts = {\n      baseNode: null,\n      paddingLeft: 16,\n      treeData: [],\n      frontIconClassName: null, // title前面的icon的className\n      titleKey: \"title\", // 标题取对象哪个字段\n      dblclick: null,\n      click: null,\n      createTreeNodeContent: null, // 构造treeNodeContent时的回调函数\n      templates: {\n        treeWrapper: `<div class=\"${PRECLSNAME} tree-wrapper\"></div>`,\n        treeBaseNode: '<ul class=\"tree-base-node\"></ul>',\n        treeNode: '<li class=\"tree-node\"></li>',\n        treeGroup: '<ul class=\"tree-group\"></ul>',\n        treeNodeContent: '<div class=\"tree-node-content\"></div>'\n      }\n    };\n\n    this.opts = assign({}, defaultOpts, options);\n    this.domRefs = {};\n    this.activeItem = null; // 保存activeItem\n    this.domRefs.treeNodeContents = []; // 收集tree-node-content\n\n    this.clickHandle = null;\n    this.dblclickHandle = null;\n\n    // 在最终渲染之前，先初始化节点、icon、绑定事件\n    this.initDom()\n      .initState()\n      .bindEvent()\n      .appendBaseNode();\n  }\n\n  /**\n   * @method initDom()\n   * @param null\n   * @return this\n   */\n  initDom(): SimpleTree {\n    if (!(this.opts.treeData instanceof Array)) {\n      throw new TypeError('treeData must be an Array!');\n    }\n    this.domRefs.treeWrapper = createNode(this.opts.templates.treeWrapper);\n    this.domRefs.treeBaseNode = createNode(this.opts.templates.treeBaseNode);\n    this.initTree(this.domRefs.treeWrapper, this.domRefs.treeBaseNode, this.opts.treeData);\n    return this;\n  }\n\n  /**\n   * @method initTree()\n   * @description 遍历data,递归生成 ul -> li -> ul\n   * @param {Node} group treeGroup(UL)\n   * @param {array} data 数据源\n   * @param {number} level 层级控制\n   * @return null\n   */\n  initTree(parentNode: HTMLElement, group: HTMLElement, data?: TreeData[], level:number = 0) {\n    let treeNode;\n    let treeNodeContent: ExtendNode; // li -> div\n\n    // 缓存 titleKey\n    const titleKey = this.opts.titleKey;\n\n    if (!data) return;\n\n    // data为空情况下，加个空的ul进去\n    if (data.length === 0) {\n      parentNode.appendChild(group);\n    }\n\n    for (let i = 0, len = data.length; i < len; i++) {\n      // 先创建li\n      treeNode = createNode(this.opts.templates.treeNode);\n      treeNodeContent = createNode(this.opts.templates.treeNodeContent);\n\n      // 处理节点内容\n      // 非叶子节点\n      if (hasChild(data[i])) {\n        // 是否展开\n        const { expand } = data[i];\n        // 增加标识\n        treeNodeContent.setAttribute('role', 'folder');\n        treeNodeContent.innerHTML = `<span class=\"tree-node-icon icon-angle ${expand &&\n          'down'}\"></span><span class=\"tree-node-title\">${data[i][titleKey]}</span>`;\n\n        if (expand) {\n          treeNodeContent.setAttribute('expand', 'true');\n        } else {\n          treeNodeContent.setAttribute('expand', 'false');\n        }\n\n        // 处理叶子节点\n      } else {\n        treeNodeContent.innerHTML = `<span class=\"tree-node-title\">${data[i][titleKey]}</span>`;\n      }\n\n      // 设置padding\n      treeNodeContent.style.paddingLeft = `${level * this.opts.paddingLeft}px`;\n\n      // 把数据加到div节点上，方便点击时查到\n      treeNodeContent.$$nodeData = data[i];\n\n      // 收集treeNodeContent引用\n      this.domRefs.treeNodeContents.push(treeNodeContent);\n\n      // 装载节点\n      treeNode.appendChild(treeNodeContent);\n      group.appendChild(treeNode);\n      parentNode.appendChild(group);\n\n      // 递归\n      if (hasChild(data[i])) {\n        const treeGroup = createNode(this.opts.templates.treeGroup);\n        this.initTree(treeNode, treeGroup, data[i].children, level + 1);\n      }\n    }\n  }\n\n  /**\n   * @method initState()\n   * 初始化状态\n   * 处理icon展示和expand属性\n   * @return this\n   */\n  initState() {\n    const { treeNodeContents } = this.domRefs;\n    const { createNodeContent } = this.opts;\n    treeNodeContents.forEach((node: ExtendNode) => {\n      const { $$nodeData } = node;\n      if (hasChild($$nodeData) && !$$nodeData.expand) {\n        const nextEle = node.nextElementSibling as HTMLElement;\n        nextEle.style.display = 'none';\n      }\n      if ($$nodeData.createNodeContent && typeof $$nodeData.createNodeContent === 'function') {\n        $$nodeData.createNodeContent(node, $$nodeData);\n      } else {\n        createNodeContent && createNodeContent(node, $$nodeData);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @method appendBaseNode()\n   * 渲染到base节点上\n   * @return null\n   */\n  appendBaseNode() {\n    this.opts.baseNode.appendChild(this.domRefs.treeWrapper);\n  }\n\n  /**\n   * @method bindEvent()\n   * 绑定事件(点击和双击事件)\n   * 使用事件委托\n   * 包含slide动画效果\n   * @return this\n   */\n  bindEvent() {\n    // 点击事件\n    this.clickHandle = (evt: Event) => {\n      const e = evt || window.event;\n      const target = (e.target || e.srcElement) as HTMLElement;\n      const tagName = target.tagName.toLowerCase();\n      // 需要判断的核心是treeNodeContent这个div节点\n      const treeNodeCon = (tagName === 'div' ? target : target.parentNode) as ExtendNode;\n      // 判断是否为展开节点\n      if (treeNodeCon.hasAttribute('role')) {\n        SimpleTree.toggleExpand(treeNodeCon);\n      } else if (this.opts.click) {\n        this.toggleActive(treeNodeCon);\n        this.opts.click(e, treeNodeCon.$$nodeData);\n      }\n    };\n\n    // 双击事件\n    this.dblclickHandle = (evt: Event): void => {\n      const e = evt || window.event;\n      const target = (e.target || e.srcElement) as HTMLElement;\n      const tagName = target.tagName.toLowerCase();\n      const treeNodeCon = (tagName === 'div' ? target : target.parentNode) as ExtendNode;\n      if (!treeNodeCon.hasAttribute('role')) {\n        // callback\n        if (this.opts.dblclick) {\n          this.toggleActive(treeNodeCon);\n          this.opts.dblclick(e, treeNodeCon.$$nodeData);\n        }\n      }\n    };\n\n    this.domRefs.treeWrapper.addEventListener('click', this.clickHandle, false);\n    this.opts.dblclick &&\n      this.domRefs.treeWrapper.addEventListener('dblclick', this.dblclickHandle, false);\n\n    return this;\n  }\n\n  /**\n   * @method toggleActive()\n   * @param  Node treeNodeCon\n   * 切换高亮\n   */\n  toggleActive(treeNodeCon: ExtendNode) {\n    this.activeItem && this.activeItem.classList && this.activeItem.classList.remove('active');\n    treeNodeCon.classList.add('active');\n    this.activeItem = treeNodeCon;\n  }\n\n  /**\n   * @method removeEvent()\n   * 清除绑定事件\n   * @return null\n   */\n  removeEvent() {\n    this.domRefs.treeWrapper.removeEventListener('click', this.clickHandle, false);\n    this.domRefs.treeWrapper.removeEventListener('dblclick', this.dblclickHandle, false);\n    this.clickHandle = null;\n    this.dblclickHandle = null;\n  }\n\n  /**\n   * @method getActiveItem()\n   * 获取高亮的节点\n   * @return Node\n   */\n  getActiveItem() {\n    if (this.activeItem) {\n      return this.activeItem;\n    }\n    return null;\n  }\n\n  /**\n   * @method destroyed()\n   * 销毁Tree节点\n   * @return null\n   */\n  destroyed() {\n    let i = this.domRefs.treeNodeContents.length;\n    while (i--) {\n      this.domRefs.treeNodeContents[i] = null;\n    }\n    this.removeEvent();\n    this.domRefs.treeWrapper = null;\n    this.opts.baseNode.removeChild(this.opts.baseNode.children[0]);\n  }\n\n  /**\n   * @method toggleExpand()\n   * 折叠切换\n   * @return null\n   */\n  static toggleExpand(treeNodeCon: ExtendNode) {\n    const firstChild = treeNodeCon.firstChild as HTMLElement;\n    if (treeNodeCon.getAttribute('expand') === 'true') {\n      firstChild.classList.remove('down');\n      treeNodeCon.setAttribute('expand', 'false');\n    } else {\n      firstChild.classList.add('down');\n      treeNodeCon.setAttribute('expand', 'true');\n    }\n    this.slideAnimate(treeNodeCon);\n  }\n\n  /**\n   * @method slideAnimate()\n   * slide动画\n   * @return null\n   */\n  static slideAnimate(treeNodeCon: HTMLElement) {\n    const group = treeNodeCon.nextElementSibling as ExtendNode;\n\n    if (group !== null) {\n      if (!group.$$transitionendHandle) {\n        group.$$transitionendHandle = this.transitionendHandle.bind(this, group);\n        group.addEventListener(TRANSITIONEND, group.$$transitionendHandle, false);\n      }\n\n      const expand = treeNodeCon.getAttribute('expand') === 'true';\n\n      // 展开\n      if (!expand) {\n        group.style.height = '';\n        const height = group.offsetHeight;\n        nextFrame(() => {\n          group.style.height = `${height}px`;\n          nextFrame(() => (group.style.height = '0'));\n        });\n      } else {\n        // 收缩\n        group.style.display = '';\n        group.style.height = '';\n        const height = group.offsetHeight;\n        nextFrame(() => {\n          group.style.height = '0';\n          nextFrame(() => (group.style.height = `${height}px`));\n        });\n      }\n    }\n  }\n\n  /**\n   * @method transitionendHandle()\n   * 过渡事件\n   * @return null\n   */\n  static transitionendHandle(el: ExtendNode) {\n    const isShow = el.style.height !== '0px';\n    if (isShow) {\n      el.style.height = '';\n    } else {\n      // 如果有2个transition同时进行，最后一个的过渡效果会被影响\n      // 因为一旦设了none，transition过渡会立马取消，有一种闪烁感\n      // el.style.display = 'none';\n    }\n    // 执行完解绑\n    el.removeEventListener(TRANSITIONEND, el.$$transitionendHandle);\n    el.$$transitionendHandle = null;\n    delete el.$$transitionendHandle;\n  }\n}\n\nSimpleTree.version = '3.0.1';\n"],"names":[],"mappings":"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"}