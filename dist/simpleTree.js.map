{"version":3,"file":"simpleTree.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../utils/index.js","../src/simpleTree/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/*eslint-disable*/\n\n/**\n * 对象浅拷贝\n * @param {Object} target\n * @returns {Object}\n */\nconst assign = Object.assign\n  ? Object.assign\n  : function(target) {\n      for (let i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n\n/**\n * 对象深拷贝\n * @param {Object} data\n * @returns {Object} map[key]\n */\nconst deepCopy = obj => {\n  if (typeof obj !== 'object') return;\n  const newObj = obj instanceof Array ? [] : {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] = typeof obj[key] === 'object' ? deepCopy(obj[key]) : obj[key];\n    }\n  }\n  return newObj;\n};\n\n/**\n * createNode\n * @param {String} htmlStr\n * @returns {DomNode}\n */\nconst createNode = htmlStr => {\n  const div = document.createElement('div');\n  div.innerHTML = htmlStr;\n  return div.childNodes[0];\n};\n\n/**\n * 节点选择器\n * @param {DomNode} el\n * @param {String} selector\n * @returns {DomNode}\n */\nconst query = (el, selector) => {\n  return el.querySelector(selector)\n    ? el.querySelector(selector)\n    : console.error('Cannot find ' + selector + ' of el!');\n};\n\n/**\n * 返回所有节点\n * @param {DomNode} el\n * @param {String} selector\n * @returns {NodeList}\n */\nconst queryAll = (el, selector) => {\n  return el.querySelectorAll(selector);\n};\n\n/**\n * 节流函数\n * @param {Function} func\n * @param {Number} wait\n * @param {Object} options\n * @returns {Function}\n */\nconst throttle = (func, wait, options) => {\n  let context, args, result;\n\n  let timeout = null;\n\n  let previous = 0;\n\n  if (!options) options = {};\n\n  const later = function() {\n    previous = options.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n\n    if (!timeout) context = args = null;\n  };\n\n  return function() {\n    const now = Date.now();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = now;\n\n      result = func.apply(context, args);\n\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n};\n\n/**\n * 去抖函数\n * @param {Function} func\n * @param {Number} wait\n * @param {Boolean} immediate\n * @returns\n */\nconst debounce = (func, wait, immediate) => {\n  let timeout, args, context, timestamp, result;\n\n  const later = function() {\n    var last = new Date().getTime() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last); // wait - last可以少执行很多次\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) {\n          context = args = null;\n        }\n      }\n    }\n  };\n\n  return function() {\n    context = this;\n    args = arguments;\n\n    // 每次触发函数，更新时间戳\n    timestamp = new Date().getTime();\n\n    // timeout判断很重要，它是判断是否首次触发的重要字段\n\n    const callNow = immediate && !timeout;\n\n    // 首次timeout为肯定为null\n    if (!timeout) {\n      // 此分支只执行一次\n      timeout = setTimeout(later, wait);\n    }\n\n    // 立即触发\n    if (callNow) {\n      result = func.apply(context, args);\n      // 解除引用\n      context = args = null;\n    }\n    return result;\n  };\n};\n\n/**\n * 判断是否为dom节点\n * @param {DomNode} item\n * @returns\n */\nconst isDOM = item => {\n  return typeof HTMLElement === 'function'\n    ? item instanceof HTMLElement\n    : item && typeof item === 'object' && item.nodeType === 1 && typeof item.nodeName === 'string';\n};\n\n/**\n * 判断对象类型\n * @param {Object} obj\n * @returns {String} map[key]\n */\nconst typeOf = obj => {\n  const toString = Object.prototype.toString;\n  const map = {\n    '[object Boolean]': 'boolean',\n    '[object Number]': 'number',\n    '[object String]': 'string',\n    '[object Function]': 'function',\n    '[object Array]': 'array',\n    '[object Date]': 'date',\n    '[object RegExp]': 'regExp',\n    '[object Undefined]': 'undefined',\n    '[object Null]': 'null',\n    '[object Object]': 'object'\n  };\n  return map[toString.call(obj)];\n};\n\n// 判断是否有子节点\nconst hasChild = nodeData => {\n  return nodeData.children && nodeData.children.length !== 0;\n};\n\nexport {\n  assign,\n  deepCopy,\n  createNode,\n  debounce,\n  throttle,\n  query,\n  queryAll,\n  isDOM,\n  typeOf,\n  hasChild\n};\n","import './index.less';\nimport { assign, createNode, hasChild } from '../../utils/index';\n\nconst preClsName = 'simple-tree';\nconst TRANSITIONEND = window.ontransitionend === undefined ? 'webkitTransitionEnd' : 'transitionend';\n\nexport default class simpleTree {\n  constructor(options) {\n    const defaultOpts = {\n      baseNode: null,\n      paddingLeft: 16,\n      animateSpeed: 'normal',\n      treeData: [],\n      frontIconClassName: null, // title前面的icon的className\n      dblclick: null,\n      click: null,\n      createTreeNodeContent: null, // 构造treeNodeContent时的回调函数\n      templates: {\n        treeWrapper: `<div class=\"${preClsName} tree-wrapper\"></div>`,\n        treeBaseNode: '<ul class=\"tree-base-node\"></ul>',\n        treeNode: '<li class=\"tree-node\"></li>',\n        treeGroup: '<ul class=\"tree-group\"></ul>',\n        treeNodeContent: '<div class=\"tree-node-content\"></div>'\n      }\n    };\n    this.opts = assign({}, defaultOpts, options);\n    this.domRefs = {};\n    this.activeItem = null; // 保存activeItem\n    this.domRefs.treeNodeContents = []; // 收集tree-node-content\n    // 在最终渲染之前，先初始化节点、icon、绑定事件\n    this.initDom()\n      .initState()\n      .bindEvent()\n      .appendBaseNode();\n  }\n\n  /**\n   * @method initDom()\n   * @param null\n   * @return this\n   */\n  initDom() {\n    if (!(this.opts.treeData instanceof Array)) {\n      throw new TypeError('treeData must be an Array!');\n    }\n    this.domRefs.treeWrapper = createNode(this.opts.templates.treeWrapper);\n    this.domRefs.treeBaseNode = createNode(this.opts.templates.treeBaseNode);\n    this.initTree(this.domRefs.treeWrapper, this.domRefs.treeBaseNode, this.opts.treeData);\n    return this;\n  }\n\n  /**\n   * @method initTree()\n   * @description 遍历data,递归生成 ul -> li -> ul\n   * @param {Node} group treeGroup(UL)\n   * @param {array} data 数据源\n   * @param {number} level 层级控制\n   * @return null\n   */\n  initTree(parentNode, group, data, level = 0) {\n    let treeNode;\n    let treeNodeContent; // li -> div\n\n    // data为空情况下，加个空的ul进去\n    if (data.length === 0) {\n      parentNode.appendChild(group);\n    }\n\n    for (let i = 0, len = data.length; i < len; i++) {\n      // 先创建li\n      treeNode = createNode(this.opts.templates.treeNode);\n      treeNodeContent = createNode(this.opts.templates.treeNodeContent);\n\n      // 处理节点内容\n      // 非叶子节点\n      if (hasChild(data[i])) {\n        // 是否展开\n        const { expand } = data[i];\n        // 增加标识\n        treeNodeContent.setAttribute('role', 'folder');\n        treeNodeContent.innerHTML = `<span class=\"tree-node-icon icon-angle ${expand\n          && 'down'}\"></span><span class=\"tree-node-title\">${data[i].title}</span>`;\n\n        if (expand) {\n          treeNodeContent.setAttribute('expand', true);\n        } else {\n          treeNodeContent.setAttribute('expand', false);\n        }\n\n        // 处理叶子节点\n      } else if (this.opts.frontIconClassName) {\n        const clas = this.opts.frontIconClassName;\n        treeNodeContent.innerHTML = `<span class=\"tree-node-icon ${clas}\"></span><span class=\"tree-node-title\">${\n          data[i].title\n        }</span>`;\n      } else {\n        treeNodeContent.innerHTML = `<span class=\"tree-node-title\">${data[i].title}</span>`;\n      }\n\n      // 设置padding\n      treeNodeContent.style.paddingLeft = `${level * this.opts.paddingLeft}px`;\n\n      // 把数据加到div节点上，方便点击时查到\n      treeNodeContent.$$nodeData = data[i];\n\n      // 收集treeNodeContent引用\n      this.domRefs.treeNodeContents.push(treeNodeContent);\n\n      // 装载节点\n      treeNode.appendChild(treeNodeContent);\n      group.appendChild(treeNode);\n      parentNode.appendChild(group);\n\n      // 递归\n      if (hasChild(data[i])) {\n        const treeGroup = createNode(this.opts.templates.treeGroup);\n        this.initTree(treeNode, treeGroup, data[i].children, level + 1);\n      }\n    }\n  }\n\n  /**\n   * @method initState()\n   * 初始化状态\n   * 处理icon展示和expand属性\n   * @return this\n   */\n  initState() {\n    const { treeNodeContents } = this.domRefs;\n    const { createNodeContent } = this.opts;\n    treeNodeContents.forEach(node => {\n      const { $$nodeData } = node;\n      if (hasChild($$nodeData) && !$$nodeData.expand) {\n        node.nextElementSibling.style.display = 'none';\n      }\n      if ($$nodeData.createNodeContent && typeof $$nodeData.createNodeContent === 'function') {\n        $$nodeData.createNodeContent(node, $$nodeData);\n      } else {\n        createNodeContent && createNodeContent(node, $$nodeData);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @method appendBaseNode()\n   * 渲染到base节点上\n   * @return null\n   */\n  appendBaseNode() {\n    this.opts.baseNode.appendChild(this.domRefs.treeWrapper);\n  }\n\n  /**\n   * @method bindEvent()\n   * 绑定事件(点击和双击事件)\n   * 使用事件委托\n   * 包含slide动画效果\n   * @return this\n   */\n  bindEvent() {\n    // 点击事件\n    this.clickHandle = evt => {\n      const e = evt || window.event;\n      const target = e.target || e.srcElement;\n      const tagName = target.tagName.toLowerCase();\n      // 需要判断的核心是treeNodeContent这个div节点\n      const treeNodeCon = tagName === 'div' ? target : target.parentNode;\n      // 判断是否为展开节点\n      if (treeNodeCon.hasAttribute('role')) {\n        simpleTree.toggleExpand(treeNodeCon);\n      } else if (this.opts.click) {\n        this.toggleActive(treeNodeCon);\n        this.opts.click(e, treeNodeCon.$$nodeData);\n      }\n    };\n\n    // 双击事件\n    this.dblclickHandle = evt => {\n      const e = evt || window.event;\n      const target = e.target || e.srcElement;\n      const tagName = target.tagName.toLowerCase();\n      const treeNodeCon = tagName === 'div' ? target : target.parentNode;\n      if (!treeNodeCon.hasAttribute('role')) {\n        // callback\n        if (this.opts.dblclick) {\n          this.toggleActive(treeNodeCon);\n          this.opts.dblclick(e, treeNodeCon.$$nodeData);\n        }\n      }\n    };\n\n    this.domRefs.treeWrapper.addEventListener('click', this.clickHandle, false);\n    this.opts.dblclick && this.domRefs.treeWrapper.addEventListener('dblclick', this.dblclickHandle, false);\n\n    return this;\n  }\n\n  /**\n   * @method toggleActive()\n   * @param  Node treeNodeCon\n   * 切换高亮\n   */\n  toggleActive(treeNodeCon) {\n    this.activeItem && this.activeItem.classList && this.activeItem.classList.remove('active');\n    treeNodeCon.classList.add('active');\n    this.activeItem = treeNodeCon;\n  }\n\n  /**\n   * @method removeEvent()\n   * 清除绑定事件\n   * @return null\n   */\n  removeEvent() {\n    this.domRefs.treeWrapper.removeEventListener('click', this.clickHandle, false);\n    this.domRefs.treeWrapper.removeEventListener('dblclick', this.dblclickHandle, false);\n    this.clickHandle = null;\n    this.dblclickHandle = null;\n  }\n\n  /**\n   * @method getActiveItem()\n   * 获取高亮的节点\n   * @return Node\n   */\n  getActiveItem() {\n    if (this.activeItem) {\n      return this.activeItem;\n    }\n    return null;\n  }\n\n  /**\n   * @method destroyed()\n   * 销毁Tree节点\n   * @return null\n   */\n  destroyed() {\n    let i = this.domRefs.treeNodeContents.length;\n    while (i--) {\n      this.domRefs.treeNodeContents[i] = null;\n    }\n    this.removeEvent();\n    this.domRefs.treeWrapper = null;\n    this.opts.baseNode.removeChild(this.opts.baseNode.children[0]);\n  }\n\n  /**\n   * @method toggleExpand()\n   * 折叠切换\n   * @return null\n   */\n  static toggleExpand(treeNodeCon) {\n    if (treeNodeCon.getAttribute('expand') === 'true') {\n      treeNodeCon.firstChild.classList.remove('down');\n      treeNodeCon.setAttribute('expand', false);\n    } else {\n      treeNodeCon.firstChild.classList.add('down');\n      treeNodeCon.setAttribute('expand', true);\n    }\n    this.slideAnimate(treeNodeCon);\n  }\n\n  /**\n   * @method slideAnimate()\n   * slide动画\n   * @return null\n   */\n  static slideAnimate(treeNodeCon) {\n    const group = treeNodeCon.nextElementSibling;\n\n    if (!group.$$transitionendHandle) {\n      group.$$transitionendHandle = this.transitionendHandle.bind(this, group);\n      group.addEventListener(TRANSITIONEND, group.$$transitionendHandle, false);\n    }\n\n    const expand = treeNodeCon.getAttribute('expand') === 'true';\n\n    if (!expand) {\n      const { offsetHeight } = group;\n      group.style.height = `${offsetHeight}px`;\n      setTimeout(() => {\n        group.style.height = '0';\n      }, 0);\n    } else {\n      group.style.display = '';\n      group.style.height = '';\n      const { offsetHeight } = group;\n      group.style.height = '0';\n      setTimeout(() => {\n        group.style.height = `${offsetHeight}px`;\n      }, 0);\n    }\n  }\n\n  /**\n   * @method transitionendHandle()\n   * 过渡事件\n   * @return null\n   */\n  static transitionendHandle(el) {\n    const isShow = el.style.height !== '0px';\n    if (isShow) {\n      el.style.height = '';\n    } else {\n      el.style.display = 'none';\n    }\n    // 执行完解绑\n    el.removeEventListener(TRANSITIONEND, el.$$transitionendHandle);\n    el.$$transitionendHandle = null;\n    delete el.$$transitionendHandle;\n  }\n}\n\nsimpleTree.version = '2.0.1';\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","assign","Object","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","createNode","div","innerHTML","htmlStr","childNodes","hasChild","nodeData","children","TRANSITIONEND","undefined","window","ontransitionend","simpleTree","options","defaultOpts","opts","domRefs","activeItem","treeNodeContents","initDom","initState","bindEvent","appendBaseNode","this","treeData","Array","TypeError","treeWrapper","templates","treeBaseNode","initTree","parentNode","group","data","level","treeNode","treeNodeContent","len","expand","setAttribute","title","frontIconClassName","clas","paddingLeft","$$nodeData","push","treeGroup","createNodeContent","forEach","node","nextElementSibling","display","baseNode","clickHandle","e","evt","event","srcElement","treeNodeCon","tagName","toLowerCase","hasAttribute","toggleExpand","_this","click","toggleActive","dblclickHandle","dblclick","addEventListener","classList","remove","add","removeEventListener","removeEvent","removeChild","getAttribute","slideAnimate","$$transitionendHandle","transitionendHandle","bind","height","offsetHeight","el","version"],"mappings":"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"}