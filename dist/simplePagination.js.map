{"version":3,"file":"simplePagination.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utils/index.ts","../src/Pagination/index.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/**\n * 对象浅拷贝\n * @param {Object} target\n * @returns {Object}\n */\n\ntype AssignTarget  = {\n  [x: string]: any;\n}\nexport const assign = Object.assign\n  ? Object.assign\n  : function(target: Object): Object {\n      for (let i = 1; i < arguments.length; i++) {\n        const source = arguments[i];\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            (<AssignTarget>target)[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n\n\n/**\n * createNode\n * @param {String} htmlStr\n * @returns {DomNode}\n */\nexport const createNode = (htmlStr: string): any => {\n  const div = document.createElement('div');\n  div.innerHTML = htmlStr;\n  return div.childNodes[0];\n};\n\n/**\n * 节点选择器\n * @param {DomNode} el\n * @param {String} selector\n * @returns {DomNode}\n */\nexport const query = (el: HTMLElement, selector: string): HTMLElement | null => {\n  return el.querySelector(selector)\n    ? el.querySelector(selector)\n    : null\n};\n\n/**\n * 返回所有节点\n * @param {DomNode} el\n * @param {String} selector\n * @returns {NodeList}\n */\nexport const queryAll = (el: HTMLElement, selector: string): NodeList => {\n  return el.querySelectorAll(selector);\n};\n\n/**\n * 判断是否为dom节点\n * @param {DomNode} item\n * @returns\n */\nexport const isDOM = (item: HTMLElement): boolean => {\n  return typeof HTMLElement === 'function'\n    ? item instanceof HTMLElement\n    : item && typeof item === 'object' && item.nodeType === 1 && typeof item.nodeName === 'string';\n};\n\n// 判断是否有子节点\ntype NodeData = {\n  children?: [];\n}\n\nexport const hasChild = (nodeData: NodeData): boolean => {\n  if (nodeData.children == null) {\n    return false;\n  }\n  // 空目录支持\n  if (nodeData.children.length === 0) {\n    return true;\n  }\n  return nodeData.children.length > 0;\n};\n\n// 下一帧执行\nexport const nextFrame = (fn: () => void) => {\n  if (window.requestAnimationFrame) {\n    window.requestAnimationFrame(fn)\n  } else {\n    window.setTimeout(fn, 16)\n  }\n}\n","import './style.less';\nimport { assign, isDOM } from '../utils/index';\n\ninterface Options {\n  baseNode: HTMLElement | null;\n  pageControl: number;\n  containerCN: string;\n  listCN: string;\n  activeListCN: string;\n  prevBtnCN: string;\n  nextBtnCN: string;\n  disableBtnCN: string;\n  pageNumCN: string;\n  preText: string;\n  nextText: string;\n}\n\nexport default class simplePagination {\n  totalPage: number;\n  currentPage: number;\n  opts: Options;\n  domRefs: any;\n  clickHandle: ((evt: Event) => void) | null;\n  static version: string;\n  constructor(totalPage: number, opts: Options) {\n    // CN为className简写\n    const defaultOpts: Options = {\n      baseNode: null, // 必须要传，分页组件挂载的节点\n      pageControl: 2, // 当前页面显示前后多少页\n      containerCN: 'page-container',\n      listCN: 'page-li',\n      activeListCN: 'page-li-active',\n      prevBtnCN: 'page-prev',\n      nextBtnCN: 'page-next',\n      disableBtnCN: 'disable',\n      pageNumCN: 'page-number',\n      preText: '上一页',\n      nextText: '下一页'\n    };\n    this.totalPage = totalPage;\n    this.currentPage = 1;\n    this.opts = assign({}, defaultOpts, opts);\n    this.domRefs = {};\n    this.clickHandle = null;\n    this.checkBaseNode()\n      .render()\n      .bindEvent();\n  }\n\n  /**\n   * @method checkBaseNode\n   * 检查BaseNode\n   */\n  checkBaseNode() {\n    if (!this.opts.baseNode) {\n      throw new Error('BaseNode is required');\n    }\n    if (!isDOM(this.opts.baseNode)) {\n      throw new Error('BaseNode must a HTMLElement');\n    }\n    return this;\n  }\n\n  /**\n   * @method render\n   * 首次渲染\n   */\n  render() {\n    const { baseNode, containerCN } = this.opts;\n    const { totalPage, currentPage } = this;\n    this.domRefs.containerNode = document.createElement('ul');\n    this.domRefs.containerNode.className = containerCN;\n    const pageContent = this.showPages(currentPage, totalPage);\n    this.domRefs.containerNode.innerHTML = pageContent;\n    baseNode!.appendChild(this.domRefs.containerNode);\n    return this;\n  }\n\n  /**\n   * @method bindEvent\n   * 绑定事件\n   */\n  bindEvent() {\n    const { prevBtnCN, nextBtnCN } = this.opts;\n    this.clickHandle = (evt: Event) => {\n      const e = evt || window.event;\n      const target = (e.target || e.srcElement) as HTMLElement;\n      if (target.dataset.page) {\n        const { page } = target.dataset;\n        this.goToPage(+page);\n      } else if (target.classList) {\n        // 上一页btn\n        if (target.classList.contains(prevBtnCN)) {\n          this.goToPage(this.currentPage - 1);\n        }\n        // 下一页btn\n        if (target.classList.contains(nextBtnCN)) {\n          this.goToPage(this.currentPage + 1);\n        }\n      }\n    };\n    const { containerNode } = this.domRefs;\n    containerNode.addEventListener('click', this.clickHandle, false);\n    return this;\n  }\n\n  /**\n   * @method goToPage\n   * 页面跳转\n   * @param {Strng|Number} page\n   */\n  goToPage(n: number) {\n    const page = n; // 传入的page如果为String，转为Number\n    const { totalPage } = this;\n    // 边缘判断\n    if (page === this.currentPage || page > totalPage || page < 1) {\n      return;\n    }\n    this.currentPage = page;\n    // 派发自定义事件\n    this.opts.baseNode!.dispatchEvent(\n      // 把page传到事件回调参数里面\n      new CustomEvent('pageChange', { detail: { page } })\n    );\n    const { containerNode } = this.domRefs;\n    const pageContent = this.showPages(this.currentPage, totalPage);\n    containerNode.innerHTML = '';\n    containerNode.innerHTML = pageContent;\n  }\n\n  /**\n   * @method showPages\n   * 核心算法，显示页数函数\n   * @param {Number} 当前页数、总页数\n   */\n  showPages(page: number, total: number) {\n    const {\n      listCN,\n      activeListCN,\n      prevBtnCN,\n      nextBtnCN,\n      disableBtnCN,\n      pageNumCN,\n      preText,\n      nextText,\n      pageControl\n    } = this.opts;\n    let str = `<li class='${listCN} ${pageNumCN} ${activeListCN}' data-page='${page}'>${page}</li>`;\n    // 处理前后顺序关系\n    for (let i = 1; i <= pageControl; i++) {\n      // 处理前面\n      if (page - i > 1) {\n        str = `<li class='${listCN} ${pageNumCN}' data-page='${page - i}'>${page - i}</li>${str}`;\n      }\n      // 处理后面\n      if (page + i < total) {\n        str = `${str}<li class='${listCN} ${pageNumCN}' data-page='${page + i}'>${page + i}</li>`;\n      }\n    }\n    // 前面的省略符\n    if (page - (pageControl + 1) > 1) {\n      str = `<li class=\"${listCN} page-ellipsis\">...</li>${str}`;\n    }\n\n    if (page > 1) {\n      str = `<li class='${listCN} ${prevBtnCN}'>${preText}</li>\n        <li class='${listCN} ${pageNumCN}' data-page='1'>1</li>\n        ${str}\n        `;\n    } else {\n      str = `<li class='${listCN} ${prevBtnCN} ${disableBtnCN}'>${preText}</li>${str}\n      `;\n    }\n\n    // 后面的省略符\n    if (page + (pageControl + 1) < total) {\n      str += `<li class=\"${listCN} page-ellipsis\">...</li>`;\n    }\n\n    if (page < total) {\n      str += `<li class='${listCN} ${pageNumCN}' data-page='${total}'>${total}</li>\n        <li class='${listCN} ${nextBtnCN}'>${nextText}</li>\n        `;\n    } else {\n      str += `<li class='${listCN} ${nextBtnCN} ${disableBtnCN}'>${nextText}</li>`;\n    }\n\n    return str;\n  }\n\n  /**\n   * @method destroyed\n   * 销毁节点\n   */\n  destroyed() {\n    this.domRefs.containerNode.removeEventListener('click', this.clickHandle, false);\n    this.opts.baseNode!.removeChild(this.domRefs.containerNode);\n    this.clickHandle = null;\n  }\n}\n\nsimplePagination.version = '2.0';\n"],"names":[],"mappings":"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"}