!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):e.simplePagination=n()}(this,function(){"use strict";!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var i=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&i.firstChild?i.insertBefore(a,i.firstChild):i.appendChild(a),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(document.createTextNode(e))}}(".page-container {\n  width: 100%;\n  list-style: none;\n  font-size: 0;\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.page-container .page-li {\n  display: inline-block;\n  font-size: 15px;\n  box-sizing: inherit;\n  border: 1px solid #eaeaea;\n  min-width: 32px;\n  height: 32px;\n  line-height: 32px;\n  margin-left: 5px;\n  cursor: pointer;\n  text-align: center;\n}\n.page-container .page-li.page-li-active {\n  background: #2d8cf0;\n  border-color: #2d8cf0;\n  color: #ffffff;\n}\n.page-container .page-prev,\n.page-container .page-next {\n  padding: 0 5px;\n  margin-left: 0;\n}\n.page-container .page-prev.disable,\n.page-container .page-next.disable {\n  color: #c6c6c6;\n}\n.page-container .page-next {\n  margin-left: 5px;\n}\n.page-container .page-ellipsis {\n  border: none;\n  cursor: default;\n}\n");var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e=function(){function i(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,n,t){return n&&i(e.prototype,n),t&&i(e,t),e}}(),i=Object.assign?Object.assign:function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e};return function(){function t(e,n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t);this.totalPage=e,this.currentPage=1,this.opts=i({},{baseNode:null,pageControl:2,containerCN:"page-container",listCN:"page-li",activeListCN:"page-li-active",prevBtnCN:"page-prev",nextBtnCN:"page-next",disableBtnCN:"disable",pageNumCN:"page-number",preText:"上一页",nextText:"下一页"},n),this.domRefs={},this.clickHandle=null,this.checkBaseNode().render().bindEvent()}return e(t,[{key:"checkBaseNode",value:function(){if(!this.opts.baseNode)throw new Error("BaseNode is required");if(e=this.opts.baseNode,!("function"==typeof HTMLElement?e instanceof HTMLElement:e&&"object"===(void 0===e?"undefined":n(e))&&1===e.nodeType&&"string"==typeof e.nodeName))throw new Error("BaseNode must a HTMLElement");var e;return this}},{key:"render",value:function(){var e=this.opts,n=e.baseNode,t=e.containerCN,i=this.totalPage,a=this.currentPage;this.domRefs.containerNode=document.createElement("ul"),this.domRefs.containerNode.className=t;var o=this.showPages(a,i);return this.domRefs.containerNode.innerHTML=o,n.appendChild(this.domRefs.containerNode),this}},{key:"bindEvent",value:function(){var a=this,e=this.opts,o=e.prevBtnCN,s=e.nextBtnCN;return this.clickHandle=function(e){var n=e||window.event,t=n.target||n.srcElement;if(t.dataset.page){var i=t.dataset.page;a.goToPage(i)}else t.classList&&(t.classList.contains(o)&&a.goToPage(a.currentPage-1),t.classList.contains(s)&&a.goToPage(a.currentPage+1))},this.domRefs.containerNode.addEventListener("click",this.clickHandle,!1),this}},{key:"goToPage",value:function(e){e=+e;var n=this.totalPage;if(!(e===this.currentPage||n<e||e<1)){this.currentPage=e,this.opts.baseNode.dispatchEvent(new CustomEvent("pageChange",{detail:{page:e}}));var t=this.domRefs.containerNode,i=this.showPages(this.currentPage,n);t.innerHTML="",t.innerHTML=i}}},{key:"showPages",value:function(e,n){for(var t=this.opts,i=t.listCN,a=t.activeListCN,o=t.prevBtnCN,s=t.nextBtnCN,r=t.disableBtnCN,l=t.pageNumCN,c=t.preText,d=t.nextText,p=t.pageControl,g="<li class='"+i+" "+l+" "+a+"' data-page='"+e+"'>"+e+"</li>",u=1;u<=p;u++)1<e-u&&(g="<li class='"+i+" "+l+"' data-page='"+(e-u)+"'>"+(e-u)+"</li>"+g),e+u<n&&(g=g+"<li class='"+i+" "+l+"' data-page='"+(e+u)+"'>"+(e+u)+"</li>");return 1<e-(p+1)&&(g='<li class="'+i+' page-ellipsis">...</li>'+g),g=1<e?"<li class='"+i+" "+o+"'>"+c+"</li>\n        <li class='"+i+" "+l+"' data-page='1'>1</li>\n        "+g:"<li class='"+i+" "+o+" "+r+"'>"+c+"</li>\n      "+g,e+(p+1)<n&&(g+='<li class="'+i+' page-ellipsis">...</li>'),g+=e<n?"<li class='"+i+" "+l+"' data-page='"+n+"'>"+n+"</li>\n        <li class='"+i+" "+s+"'>"+d+"</li>\n        ":"<li class='"+i+" "+s+" "+r+"'>"+d+"</li>"}},{key:"destroyed",value:function(){this.domRefs.containerNode.removeEventListener("click",this.clickHandle,!1),this.opts.baseNode.removeChild(this.domRefs.containerNode),this.clickHandle=null}}]),t}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
